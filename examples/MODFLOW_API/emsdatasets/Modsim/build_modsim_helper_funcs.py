import os
import numpy as np
import pandas as pd

#             0, 1,  2,  3,   4, 5, 6, 7,    8,      9,        10,            11, aux
orig_seg = [( 1, 2,  2,  0, 112, 0, 0, 0, 0.04,   0.04,"Mainstem_01",        200, 0),
            ( 2, 2, -1,  0, 112, 0, 0, 0, 0.04,   0.04,"Mainstem_02",        200, 0),  
            ( 3, 2, 13, -1, 112, 0, 0, 0, 0.04,   0.04,"Mainstem_03",        200, 2),  
            ( 4, 1,  6,  3,   0, 0, 0, 0,    0,   0.04,"AgArea1_01",          10, 1),
            ( 5, 1,  0,  4,   0, 0, 0, 0,    0,   0.04,"AgArea1Lateral1",     10, 0),
            ( 6, 1,  8,  0,   0, 0, 0, 0, 0.04, np.nan,"AgArea1_02",          10, 0),
            ( 7, 1,  0,  6,   0, 0, 0, 0,    0,   0.04,"AgArea1Lateral2",     10, 0),
            ( 8, 1, 10,  0,   0, 0, 0, 0, 0.04, np.nan,"AgArea1_03",          10, 0),
            ( 9, 1,  0,  8,   0, 0, 0, 0,    0,   0.04,"AgArea1Lateral3",     10, 0),
            (10, 1, 12,  0,   0, 0, 0, 0, 0.04, np.nan,"AgArea1_04",          10, 0),
            (11, 1,  0, 10,   0, 0, 0, 0,    0,   0.04,"AgArea1Lateral4",     10, 0),
            (12, 1, 46,  0,   0, 0, 0, 0, 0.04, np.nan,"AgArea1Return",       10, 0),
            (13, 2, 23,  0, 112, 0, 0, 0, 0.04,   0.04,"Mainstem_04",        200, 0),  
            (14, 1, 16, 13,   0, 0, 0, 0,    0,   0.04,"AgArea2_01",          10, 1),
            (15, 1,  0, 14,   0, 0, 0, 0,    0,   0.04,"AgArea2Lateral1",     10, 0),
            (16, 1, 18,  0,   0, 0, 0, 0, 0.04, np.nan,"AgArea2_02",          10, 0),
            (17, 1,  0, 16,   0, 0, 0, 0,    0,   0.04,"AgArea2Lateral2",     10, 0),
            (18, 1, 20,  0,   0, 0, 0, 0, 0.04, np.nan,"AgArea2_03",          10, 0),
            (19, 1,  0, 18,   0, 0, 0, 0,    0,   0.04,"AgArea2Lateral3",     10, 0),  
            (20, 1, 22,  0,   0, 0, 0, 0, 0.04, np.nan,"AgArea2_04",          10, 0),
            (21, 1,  0, 20,   0, 0, 0, 0,    0,   0.04,"AgArea2Lateral4",     10, 0),  
            (22, 1, 48,  0,   0, 0, 0, 0, 0.04, np.nan,"AgArea2Return",       10, 0),
            (23, 2, 25,  0, 112, 0, 0, 0, 0.04,   0.04,"Mainstem_05",        200, 0),  
            (24, 2, 25,  0, 112, 0, 0, 0, 0.04,   0.04,"Drain1",              20, 0),  
            (25, 2, 34,  0, 112, 0, 0, 0, 0.04,   0.04,"Mainstem_06",        200, 0),  
            (26, 1, 28, 25,   0, 0, 0, 0,    0,   0.04,"AgArea3_01",          10, 1),
            (27, 1,  0, 26,   0, 0, 0, 0,    0,   0.04,"AgArea3Lateral1",     10, 0),
            (28, 1, 30,  0,   0, 0, 0, 0, 0.04, np.nan,"AgArea3_02",          10, 0),
            (29, 1,  0, 28,   0, 0, 0, 0,    0,   0.04,"AgArea3Lateral2",     10, 0),
            (30, 1, 32,  0,   0, 0, 0, 0, 0.04, np.nan,"AgArea3_03",          10, 0),
            (31, 1,  0, 30,   0, 0, 0, 0,    0,   0.04,"AgArea3Lateral3",     10, 0),
            (32, 1, 50,  0,   0, 0, 0, 0, 0.04, np.nan,"AgArea3_04",          10, 0),
            (33, 1,  0, 32,   0, 0, 0, 0,    0,   0.04,"AgArea3Lateral4",     10, 0),  
            (34, 2, 36,  0, 112, 0, 0, 0, 0.04,   0.04,"Mainstem_07",        200, 0),  
            (35, 2, 36,  0, 112, 0, 0, 0, 0.04,   0.04,"Drain2",              20, 0),  
            (36, 2, 47,  0, 112, 0, 0, 0, 0.04,   0.04,"Mainstem_08",        200, 0),  
            (37, 1, 39, 36,   0, 0, 0, 0,    0,   0.04,"AgArea4_01",          10, 1),
            (38, 1,  0, 37,   0, 0, 0, 0,    0,   0.04,"AgArea4Lateral1",     10, 0),
            (39, 1, 41,  0,   0, 0, 0, 0, 0.04, np.nan,"AgArea4_02",          10, 0),
            (40, 1,  0, 39,   0, 0, 0, 0,    0,   0.04,"AgArea4Lateral2",     10, 0),
            (41, 1, 43,  0,   0, 0, 0, 0, 0.04, np.nan,"AgArea4_03",          10, 0),
            (42, 1,  0, 41,   0, 0, 0, 0,    0,   0.04,"AgArea4Lateral3",     10, 0),
            (43, 1, 53,  0,   0, 0, 0, 0, 0.04, np.nan,"AgArea4_04",          10, 0),
            (44, 1,  0, 43,   0, 0, 0, 0,    0,   0.04,"AgArea4Lateral4",     10, 0),
            (45, 2, 46,  0, 112, 0, 0, 0, 0.04,   0.04,"Tributary_01",        20, 0),  
            (46, 2, 52,  0, 112, 0, 0, 0, 0.04,   0.04,"Tributary_02",        20, 0),  
            (47, 2, 49,  0, 112, 0, 0, 0, 0.04,   0.04,"Mainstem_09",        200, 0),  
            (48, 2, 49,  0, 112, 0, 0, 0, 0.04,   0.04,"Drain3",              20, 0),  
            (49, 2, 51,  0, 112, 0, 0, 0, 0.04,   0.04,"Mainstem_10",        200, 0),  
            (50, 1, 51,  0,   0, 0, 0, 0, 0.04, np.nan,"AgArea3Return",       10, 0),  
            (51, 2, 52,  0, 112, 0, 0, 0, 0.04,   0.04,"Mainstem_11",        200, 0),  
            (52, 2, 54,  0, 112, 0, 0, 0, 0.04,   0.04,"Mainstem_12",        200, 0),  
            (53, 1, 54,  0,   0, 0, 0, 0, 0.04, np.nan,"AgArea4Return",       10, 0),  
            (54, 2,  0,  0, 112, 0, 0, 0, 0.04,   0.04,"Mainstem_13",        200, 0),  
            (55, 1,  3, -1,   0, 0, 0, 0,0.013, np.nan,"SpillwayReliefValve",400, 0)]

#            0,  1,  2,  3,  4,      5,           6,          7,   8,    9,  10,  11,  12,13
orig_rch = [(2, 34,  1,  1,  1, 200.51,     1426.61, 0.03380275, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 34,  2,  1,  2, 409.53,     1419.84, 0.03091691, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 34,  3,  1,  3, 418.81,     1413.95, 0.02526567, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 34,  4,  1,  4,  413.8,     1409.25, 0.01977428, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 34,  5,  1,  5, 442.01,     1405.77, 0.01435245, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 34,  6,  1,  6, 415.56,     1402.91, 0.01336941, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 34,  7,  1,  7, 262.89,     1400.21, 0.00963071, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 35,  7,  1,  8, 320.05,     1400.38, 0.00963071, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 35,  8,  2,  1, 400.03,      1398.5, 0.00374972, 0.5, 0.25e-09, 0.3, 0.2, 3.5, 1),
            (2, 35,  9,  2,  2,  291.3,        1397,  0.0085822, 0.5, 0.25e-09, 0.3, 0.2, 3.5, 1),
            (2, 34,  9,  2,  3, 319.38,        1396, 0.01252412, 0.5, 0.25e-09, 0.3, 0.2, 3.5, 1),
            (2, 34, 10,  2,  4,    400,        1393, 0.00999994, 0.5, 0.25e-09, 0.3, 0.2, 3.5, 1),
            (2, 34, 11,  2,  5,    400,        1392, 0.00499994, 0.5, 0.25e-09, 0.3, 0.2, 3.5, 1),
            (2, 34, 12,  2,  6,    400,        1391, 0.00374995, 0.5, 0.25e-09, 0.3, 0.2, 3.5, 1),
            (2, 34, 13,  2,  7,    400,      1390.5, 0.00499994, 0.5, 0.25e-09, 0.3, 0.2, 3.5, 1),
            (2, 34, 14,  2,  8,    400,        1389, 0.00874989, 0.5, 0.25e-09, 0.3, 0.2, 3.5, 1),
            (2, 34, 15,  2,  9,    400,        1387, 0.00499994, 0.5, 0.25e-09, 0.3, 0.2, 3.5, 1),
            (2, 34, 16,  2, 10, 455.89,        1387, 0.00219351, 0.5, 0.25e-09, 0.3, 0.2, 3.5, 1),
            (2, 34, 17,  2, 11,    130,        1386, 0.00769229, 0.5, 0.25e-09, 0.3, 0.2, 3.5, 1),
            (2, 35, 17,  2, 12, 439.46,        1386, 0.00769229, 0.5, 0.25e-09, 0.3, 0.2, 3.5, 1),
            (2, 35, 18,  3,  1, 204.32,     1388.10,     0.0001, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 35, 18,  4,  1, 197.05,     1385.26, 0.00014707, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 35, 19,  4,  2, 402.43, 1385.215917, 0.00014707, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 35, 20,  4,  3, 419.64, 1385.155466, 0.00014707, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 36, 20,  4,  4,  14.46, 1385.123545, 0.00014707, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 36, 21,  4,  5, 545.06,   1385.0824, 0.00014707, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 37, 21,  4,  6,  32.31, 1385.039944, 0.00014707, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 37, 22,  4,  7,  415.2, 1385.007036, 0.00014707, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 38, 22,  4,  8, 401.06, 1384.947012, 0.00014707, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 39, 22,  4,  9, 405.85, 1384.887676, 0.00014707, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 40, 22,  4, 10, 402.26, 1384.828252, 0.00014707, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 41, 22,  4, 11, 423.49,  1384.76753, 0.00014707, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 42, 22,  4, 12, 431.01, 1384.704695, 0.00014707, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 42, 23,  4, 13,  69.67, 1384.667877, 0.00014707, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 43, 23,  4, 14, 496.74, 1384.626226, 0.00014707, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 43, 24,  4, 15,  85.47, 1384.583413, 0.00014707, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 44, 24,  4, 16, 422.67, 1384.546047, 0.00014707, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 44, 25,  4, 17, 311.93, 1384.492028, 0.00014707, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 45, 25,  4, 18, 132.47, 1384.459349, 0.00014707, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 45, 26,  4, 19, 406.55, 1384.419713, 0.00014707, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 45, 27,  4, 20, 403.18, 1384.360169, 0.00014707, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 44, 27,  4, 21,   9.05, 1384.329856, 0.00014707, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 44, 28,  4, 22,  422.3, 1384.298136, 0.00014707, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 44, 29,  4, 23, 408.26, 1384.237061, 0.00014707, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 44, 30,  4, 24, 408.09, 1384.177031, 0.00014707, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 44, 31,  4, 25, 407.36, 1384.117067, 0.00014707, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 44, 31,  5,  1,  10.00, 1384.079949, 0.00018191, 0.5, 0.00, 0.3, 0.2, 3.5, 1),
            (2, 44, 31,  6,  1,   1.73, 1384.079949, 0.00018191, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 44, 32,  6,  2, 415.56, 1384.042085, 0.00018191, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 44, 33,  6,  3, 441.49, 1383.964132, 0.00018191, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 44, 34,  6,  4, 154.98,  1383.90988, 0.00018191, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 45, 34,  6,  5, 456.32,  1383.85428, 0.00018191, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 46, 34,  6,  6, 206.53,  1383.79399, 0.00018191, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 46, 35,  6,  7, 266.08, 1383.751004, 0.00018191, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 47, 35,  6,  8, 465.69, 1383.684446, 0.00018191, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 47, 36,  6,  9,  11.99, 1383.640998, 0.00018191, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 48, 36,  6, 10, 553.29, 1383.589583, 0.00018191, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 48, 37,  6, 11,  91.77, 1383.530912, 0.00018191, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 49, 37,  6, 12, 352.77, 1383.490479, 0.00018191, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 49, 38,  6, 13, 470.87, 1383.415565, 0.00018191, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 50, 38,  6, 14,   3.15,  1383.37245, 0.00018191, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 50, 39,  6, 15, 550.35, 1383.322106, 0.00018191, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 51, 39,  6, 16,   35.9, 1383.268784, 0.00018191, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 51, 40,  6, 17, 484.78, 1383.221426, 0.00018191, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 52, 40,  6, 18, 140.04, 1383.164595, 0.00018191, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 52, 41,  6, 19, 380.64, 1383.117237, 0.00018191, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 53, 41,  6, 20, 184.04, 1383.065876, 0.00018191, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 53, 42,  6, 21, 437.47, 1383.009347, 0.00018191, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 53, 43,  6, 22, 327.21, 1382.939795, 0.00018191, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 54, 43,  6, 23, 110.04, 1382.900025, 0.00018191, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 54, 44,  6, 24, 400.11, 1382.853625, 0.00018191, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 54, 45,  7,  1,  10.00, 1382.797224,     0.0001, 0.5, 0.00, 0.3, 0.2, 3.5, 1),
            (2, 54, 45,  8,  1, 400.08, 1382.797224,     0.0001, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 54, 46,  8,  2, 405.18, 1382.756961,     0.0001, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 54, 47,  8,  3, 120.21, 1382.730692,     0.0001, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 53, 47,  8,  4, 305.93, 1382.709385,     0.0001, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 53, 48,  8,  5, 426.13, 1382.672782,     0.0001, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 53, 49,  8,  6, 426.13, 1382.630169,     0.0001, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 53, 50,  8,  7,   1.83, 1382.608771,     0.0001, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 52, 50,  8,  8,  488.3, 1382.584264,     0.0001, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 52, 51,  8,  9,  202.7, 1382.549714,     0.0001, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 51, 51,  8, 10, 290.54, 1382.525052,     0.0001, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 51, 52,  8, 11,  383.8, 1382.491335,     0.0001, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 50, 52,  8, 12, 126.73, 1382.465809,     0.0001, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 50, 53,  8, 13, 463.52, 1382.436296,     0.0001, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 49, 53,  8, 14,  80.43, 1382.409099,     0.0001, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 49, 54,  8, 15, 457.38, 1382.382208,     0.0001, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 49, 55,  8, 16,   5.31, 1382.359074,     0.0001, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 49, 55,  9,  1,  10.00, 1382.359074,     0.0001, 0.5, 0.00, 0.3, 0.2, 3.5, 1),
            (2, 49, 55, 10,  1, 400.95, 1382.152875, 0.00101511, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 49, 56, 10,  2, 407.78,   1381.7424, 0.00101511, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 49, 57, 10,  3, 406.44, 1381.329138, 0.00101511, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 49, 58, 10,  4, 403.66, 1380.917968, 0.00101511, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 49, 59, 10,  5, 412.58, 1380.503681, 0.00101511, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 50, 59, 10,  6,  21.27, 1380.283478, 0.00101511, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 50, 60, 10,  7, 447.21, 1380.045699, 0.00101511, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 50, 61, 10,  8, 261.29, 1379.686096, 0.00101511, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 51, 61, 10,  9, 362.75, 1379.369362, 0.00101511, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 51, 62, 10, 10, 148.57, 1379.109839, 0.00101511, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 52, 62, 10, 11, 452.22, 1378.804905, 0.00101511, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 52, 63, 10, 12, 100.02, 1378.524613, 0.00101511, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 53, 63, 10, 13, 392.41, 1378.274677, 0.00101511, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 53, 64, 10, 14, 406.85, 1377.869009, 0.00101511, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 53, 65, 10, 15, 419.67, 1377.449504, 0.00101511, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 53, 65, 11,  1,  10.00, 1377.449504, 0.00101511, 0.5, 0.00, 0.3, 0.2, 3.5, 1),
            (2, 53, 65, 12,  1,    1.1,     1377.01, 0.10157399, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 53, 66, 12,  2,  48.51,     1375.25,     0.0001, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 54, 66, 12,  3, 372.26,     1377.37,     0.0001, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 54, 67, 12,  4, 420.77,     1375.44, 0.01045483, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 54, 68, 12,  5, 420.77,     1372.98, 0.01322281, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 54, 69, 12,  6,  75.37,     1369.87,     0.0001, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 55, 69, 12,  7,  372.5,     1372.98,     0.0001, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 55, 70, 12,  8, 382.32,     1369.88,     0.0001, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 56, 70, 12,  9, 126.38,     1372.99,     0.0001, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 56, 71, 12, 10, 505.56,     1370.01, 0.01256333, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 56, 72, 12, 11,  21.14,     1366.64,     0.0001, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 57, 72, 12, 12, 480.68,     1370.06, 0.00134188, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 57, 73, 12, 13, 181.72,        1366, 0.00709555, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 58, 73, 12, 14, 339.17,     1368.77, 0.00597985, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 58, 74, 12, 15, 249.07,     1363.97, 0.01009512, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 59, 74, 12, 16, 322.54,     1366.25, 0.00975428, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 59, 75, 12, 17, 252.49,     1360.82, 0.01167577, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 60, 75, 12, 18, 260.01,      1363.3, 0.01317994, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 60, 76, 12, 19, 446.05,     1357.39, 0.00810807, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 61, 76, 12, 20,  39.37,     1359.69, 0.09491724, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 61, 77, 12, 21, 489.42,     1353.66, 0.02404786, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 61, 78, 12, 22, 132.22,     1347.92, 0.03672952, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 62, 78, 12, 23, 453.53,      1348.8, 0.00939995, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 62, 79, 12, 24,  94.02,     1343.65, 0.02159334, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 63, 79, 12, 25, 380.28,     1346.77, 0.01077498, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 63, 80, 12, 26, 405.36,     1339.56, 0.02586647, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 63, 81, 12, 27, 242.43,     1336.29, 0.02586647, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 35, 18, 13,  1, 195.97,     1385.26, 0.00312753, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 35, 19, 13,  2, 400.33,     1384.64, 0.00327762, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 35, 20, 13,  3, 401.65,     1383.94, 0.00374307, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 35, 21, 13,  4, 129.48,     1383.14, 0.00374307, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 35, 21, 14,  1, 289.33,     1383.14, 0.00007896, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 35, 22, 14,  2, 329.92, 1383.115552, 0.00007896, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 34, 22, 14,  3, 100.78, 1383.098548, 0.00007896, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 34, 23, 14,  4, 494.02, 1383.075065, 0.00007896, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 34, 24, 14,  5, 110.38, 1383.051204, 0.00007896, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 33, 24, 14,  6, 354.74, 1383.032841, 0.00007896, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 33, 25, 14,  7, 394.31, 1383.003268, 0.00007896, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 32, 25, 14,  8,  88.38, 1382.984212, 0.00007896, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 32, 26, 14,  9, 486.88,   1382.9615, 0.00007896, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 31, 26, 14, 10, 140.28,  1382.93674, 0.00007896, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 31, 27, 14, 11, 332.22, 1382.918086, 0.00007896, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 30, 27, 14, 12, 440.99, 1382.887559, 0.00007896, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 29, 27, 14, 13, 401.85, 1382.854284, 0.00007896, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 28, 27, 14, 14, 404.07, 1382.822466, 0.00007896, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 27, 27, 14, 15, 418.69, 1382.789984, 0.00007896, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 26, 27, 14, 16, 451.77, 1382.755618, 0.00007896, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 25, 27, 14, 17,  93.31, 1382.734098, 0.00007896, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 25, 26, 14, 18,  374.5, 1382.715629, 0.00007896, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 24, 26, 14, 19, 396.89, 1382.685175, 0.00007896, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 24, 25, 14, 20,  70.92, 1382.666705, 0.00007896, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 23, 25, 14, 21, 416.83, 1382.647449, 0.00007896, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 22, 25, 14, 22, 407.34, 1382.614911, 0.00007896, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 21, 25, 14, 23, 374.36, 1382.584049, 0.00007896, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 21, 26, 14, 24,  42.65, 1382.567586, 0.00007896, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 20, 26, 14, 25, 421.64, 1382.549256, 0.00007896, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 19, 26, 14, 26, 475.18, 1382.513849, 0.00007896, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 18, 26, 14, 27,  27.58,    1382.494, 0.00007896, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 18, 27, 14, 28, 540.33, 1382.471579, 0.00007896, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 18, 28, 14, 29,  31.26, 1382.449013, 0.00007896, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 17, 28, 14, 30, 387.86, 1382.432466, 0.00007896, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 17, 29, 14, 31, 400.14, 1382.401356, 0.00007896, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 17, 30, 14, 32, 402.81, 1382.369655, 0.00007896, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 17, 31, 14, 33, 144.15, 1382.348061, 0.00007896, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 18, 31, 14, 34, 270.71, 1382.331683, 0.00007896, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 18, 32, 14, 35, 414.86, 1382.304616, 0.00007896, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 18, 33, 14, 36, 416.02, 1382.271813, 0.00007896, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 18, 34, 14, 37, 307.99, 1382.243229, 0.00007896, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 19, 34, 14, 38,  117.1, 1382.226447, 0.00007896, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 19, 35, 14, 39, 425.09, 1382.205041, 0.00007896, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 19, 36, 14, 40,   7.76, 1382.187952, 0.00007896, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 19, 36, 15,  1,  10.00, 1382.187952, 0.00007896, 0.5, 0.00, 0.3, 0.2, 3.5, 1),
            (2, 19, 36, 16,  1, 417.33, 1382.135441, 0.00024706, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 19, 37, 16,  2, 214.56, 1382.057383, 0.00024706, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 20, 37, 16,  3, 214.65, 1382.004363, 0.00024706, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 20, 38, 16,  4,  467.5, 1381.920097, 0.00024706, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 20, 39, 16,  5, 134.49, 1381.845733, 0.00024706, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 21, 39, 16,  6, 398.26, 1381.779923, 0.00024706, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 21, 40, 16,  7, 184.82, 1381.707895, 0.00024706, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 22, 40, 16,  8, 368.81, 1381.639505, 0.00024706, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 22, 41, 16,  9, 209.75, 1381.568035, 0.00024706, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 23, 41, 16, 10, 310.41,  1381.50378, 0.00024706, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 23, 42, 16, 11, 422.61,  1381.41323, 0.00024706, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 23, 43, 16, 12, 403.28, 1381.311208, 0.00024706, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 23, 44, 16, 13, 410.37, 1381.210698, 0.00024706, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 23, 45, 16, 14,   8.29,  1381.15898, 0.00024706, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 23, 45, 17,  1,  10.00,  1381.15898, 0.00024706, 0.5, 0.00, 0.3, 0.2, 3.5, 1),
            (2, 23, 45, 18,  1, 442.12, 1381.131069, 0.00012394, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 23, 46, 18,  2, 151.97, 1381.094253, 0.00012394, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 22, 46, 18,  3, 376.45, 1381.061507, 0.00012394, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 22, 47, 18,  4, 206.41, 1381.025387, 0.00012394, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 21, 47, 18,  5, 460.43, 1380.984063, 0.00012394, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 20, 47, 18,  6,  71.65,  1380.95109, 0.00012394, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 20, 48, 18,  7,  363.4,  1380.92413, 0.00012394, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 19, 48, 18,  8, 420.06, 1380.875579, 0.00012394, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 18, 48, 18,  9, 407.65, 1380.824285, 0.00012394, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 17, 48, 18, 10, 160.13,   1380.7891, 0.00012394, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 17, 49, 18, 11, 272.22, 1380.762307, 0.00012394, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 16, 49, 18, 12, 472.83, 1380.716137, 0.00012394, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 15, 49, 18, 13,  84.24, 1380.681615, 0.00012394, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 15, 50, 18, 14, 395.34, 1380.651895, 0.00012394, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 14, 50, 18, 15, 380.62, 1380.603809, 0.00012394, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 14, 51, 18, 16,  74.37, 1380.575614, 0.00012394, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 13, 51, 18, 17, 524.77, 1380.538485, 0.00012394, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 12, 51, 18, 18,  40.09,  1380.50348, 0.00012394, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 12, 51, 19,  1,  10.00,  1380.50348, 0.00012394, 0.5, 0.00, 0.3, 0.2, 3.5, 1),
            (2, 12, 51, 20,  1,   1.92, 1380.466668, 0.00175256, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 12, 52, 20,  2, 488.27, 1380.037124, 0.00175256, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 11, 52, 20,  3, 132.39, 1379.493252, 0.00175256, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 11, 53, 20,  4, 368.13, 1379.054657, 0.00175256, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 10, 53, 20,  5, 297.33, 1378.471527, 0.00175256, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 10, 54, 20,  6, 217.74, 1378.020182, 0.00175256, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2,  9, 54, 20,  7, 351.37, 1377.521482, 0.00175256, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2,  9, 55, 20,  8, 232.97, 1377.009437, 0.00175256, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2,  8, 55, 20,  9, 290.24, 1376.550958, 0.00175256, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2,  8, 56, 20, 10, 372.42, 1375.970282, 0.00175256, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2,  7, 56, 20, 11, 127.58, 1375.532142, 0.00175256, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2,  7, 57, 20, 12, 487.66,  1374.99302, 0.00175256, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2,  7, 58, 20, 13,  85.71, 1374.490587, 0.00175256, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2,  6, 58, 20, 14, 385.45, 1374.077719, 0.00175256, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2,  6, 59, 20, 15, 441.77, 1373.352843, 0.00175256, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2,  6, 60, 20, 16,  24.68, 1372.944102, 0.00175256, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2,  5, 60, 20, 17, 425.94, 1372.549233, 0.00175256, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2,  5, 61, 20, 18, 445.11, 1371.785949, 0.00175256, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2,  5, 62, 20, 19,  76.45, 1371.328916, 0.00175256, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2,  4, 62, 20, 20, 331.32, 1370.971596, 0.00175256, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2,  4, 63, 20, 21, 162.34, 1370.539011, 0.00175256, 0.5, 0.04, 0.3, 0.2, 3.5, 1), 
            (2,  4, 63, 21,  1,  10.00, 1370.539011, 0.00175256, 0.5, 0.00, 0.3, 0.2, 3.5, 1),
            (2,  4, 63, 22,  1, 244.42,     1370.42,  0.0048769, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2,  4, 64, 22,  2, 404.65,     1369.23, 0.00506504, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2,  4, 65, 22,  3,    400,     1368.37, 0.00403961, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2,  4, 66, 22,  4,    400,     1367.61, 0.00374023, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2,  4, 67, 22,  5,  404.4,     1366.87, 0.00361384, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2,  4, 68, 22,  6, 404.77,     1366.15, 0.00353871, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2,  4, 69, 22,  7, 302.53,     1365.44, 0.00640263, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2,  5, 69, 22,  8, 115.44,     1364.21, 0.01589603, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2,  5, 70, 22,  9, 427.81,     1363.61, 0.00271357, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2,  5, 71, 22, 10,    452,     1363.05, 0.00420436, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2,  6, 72, 22, 11, 564.49,     1361.71,  0.0037095, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2,  7, 72, 22, 12,   2.39,     1360.96, 0.42405866, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2,  7, 73, 22, 13, 309.56,     1360.69, 0.42405866, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 35, 21, 23,  1, 279.79,     1383.14, 0.00333153, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 35, 22, 23,  2, 358.76,     1382.21, 0.00222493, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 36, 22, 23,  3,  93.15,     1382.34, 0.01934311, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 36, 23, 23,  4, 434.29,     1380.41, 0.00821429, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 36, 24, 23,  5, 406.34,     1378.77, 0.00588547, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 36, 25, 23,  6, 449.74,     1378.02, 0.00315181, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 36, 26, 23,  7, 477.88,     1377.36, 0.00308675, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 36, 27, 23,  8, 446.55,     1376.54,  0.0018676, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 35, 27, 23,  9, 348.43,     1376.52,  0.0020327, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 35, 28, 23, 10, 239.64,     1375.83, 0.00159946, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 34, 28, 23, 11, 187.75,     1376.14, 0.00351168, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 34, 29, 23, 12, 137.99,     1375.17, 0.00764342, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 35, 29, 23, 13, 343.91,     1375.09, 0.00162603, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 35, 30, 23, 14, 416.35,     1374.61, 0.00178729, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 35, 31, 23, 15, 454.97,     1374.34,  0.0009168, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 35, 32, 23, 16,  90.23,      1374.2, 0.00378387, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 34, 32, 23, 17, 416.88,        1374, 0.00159848, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 34, 33, 23, 18, 333.69,     1373.53,     0.0001, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 33, 33, 23, 19, 115.79,        1374,     0.0001, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 33, 34, 23, 20, 216.48,     1373.99, 0.00458842, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 34, 34, 23, 21, 266.27,     1373.01, 0.00582082, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 34, 35, 23, 22, 179.08,     1372.44, 0.00582082, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 23, 31, 24,  1, 511.49,     1377.21, 0.00080809, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 24, 32, 24,  2, 464.17,      1376.8,  0.0013791, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 25, 32, 24,  3, 320.37,     1376.57, 0.00125967, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 25, 33, 24,  4, 252.75,     1376.39, 0.00184787, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 26, 33, 24,  5, 431.49,      1376.1, 0.00134492, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 27, 33, 24,  6, 330.21,     1375.81, 0.00110827, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 27, 34, 24,  7,  159.8,     1375.74, 0.00271036, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 28, 34, 24,  8, 419.87,     1375.38, 0.00183016, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 29, 34, 24,  9, 403.08,     1374.97, 0.00222891, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 30, 34, 24, 10, 408.55,     1374.48, 0.00110192, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 30, 35, 24, 11,  15.64,     1374.52, 0.04187729, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 31, 35, 24, 12, 427.58,     1373.82, 0.00354206, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 32, 35, 24, 13, 401.11,        1373, 0.00380441, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 33, 35, 24, 14, 400.12,      1372.3, 0.00390198, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 34, 35, 24, 15, 280.43,     1371.44, 0.00390198, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 34, 35, 25,  1, 145.53,     1372.44,  0.0006811, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 35, 35, 25,  2, 219.52,     1372.34, 0.00397706, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 35, 36, 25,  3, 405.81,     1371.57, 0.00356277, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 35, 37, 25,  4, 402.97,      1370.9, 0.00334247, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 35, 38, 25,  5,  415.2,     1370.22, 0.00366979, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 35, 39, 25,  6, 156.85,     1369.37, 0.00654357, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 34, 39, 25,  7, 423.48,     1369.19, 0.00654357, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 34, 39, 26,  1,  44.41,     1369.19, 0.00028119, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 34, 40, 26,  2, 403.78, 1369.126987, 0.00028119, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 34, 41, 26,  3, 336.82, 1369.022862, 0.00028119, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 33, 41, 26,  4,  67.14, 1368.966067, 0.00028119, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 33, 42, 26,  5, 416.74, 1368.898036, 0.00028119, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 33, 43, 26,  6, 418.41, 1368.780618, 0.00028119, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 33, 44, 26,  7,  422.4, 1368.662405, 0.00028119, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 33, 45, 26,  8,  46.29, 1368.596509, 0.00028119, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 32, 45, 26,  9,  376.1, 1368.537123, 0.00028119, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 32, 46, 26, 10, 428.76, 1368.423964, 0.00028119, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 32, 47, 26, 11, 298.39,  1368.32173, 0.00028119, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 31, 47, 26, 12, 143.21, 1368.259644, 0.00028119, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 31, 48, 26, 13, 477.85, 1368.172326, 0.00028119, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 31, 49, 26, 14, 138.22, 1368.085709, 0.00028119, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 30, 49, 26, 15, 355.84, 1368.016247, 0.00028119, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 30, 50, 26, 16,  319.8, 1367.921255, 0.00028119, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 29, 50, 26, 17, 182.78, 1367.850595, 0.00028119, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 29, 51, 26, 18, 464.25, 1367.759626, 0.00028119, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 28, 51, 26, 19,  44.65, 1367.688077, 0.00028119, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 28, 52, 26, 20, 499.16,  1367.61162, 0.00028119, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 28, 53, 26, 21,  147.5, 1367.520703, 0.00028119, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 27, 53, 26, 22, 317.03, 1367.455392, 0.00028119, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 27, 54, 26, 23, 464.53, 1367.345509, 0.00028119, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 27, 55, 26, 24,   5.14, 1367.279476, 0.00028119, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 26, 55, 26, 25, 455.26, 1367.214746, 0.00028119, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 26, 56, 26, 26, 366.23, 1367.099248, 0.00028119, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 25, 56, 26, 27,  88.95, 1367.035252, 0.00028119, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 25, 57, 26, 28, 455.19, 1366.958749, 0.00028119, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 25, 58, 26, 29, 292.27,  1366.85366, 0.00028119, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 24, 58, 26, 30,  179.2, 1366.787373, 0.00028119, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 24, 58, 27,  1,   10.0, 1366.787373, 0.00028119, 0.5, 0.00, 0.3, 0.2, 3.5, 1),
            (2, 24, 58, 28,  1,   0.93, 1366.733257, 0.00060086, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 24, 59, 28,  2,  483.1,  1366.58784, 0.00060086, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 23, 59, 28,  3,  18.37, 1366.437183, 0.00060086, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 23, 60, 28,  4, 514.47, 1366.277102, 0.00060086, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 23, 61, 28,  5,  94.36, 1366.094191, 0.00060086, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 22, 61, 28,  6, 491.14,  1365.91829, 0.00060086, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 22, 62, 28,  7,  49.33, 1365.755916, 0.00060086, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 21, 62, 28,  8, 477.07,  1365.59777, 0.00060086, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 20, 62, 28,  9, 236.25, 1365.383467, 0.00060086, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 20, 63, 28, 10, 208.98, 1365.249707, 0.00060086, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 19, 63, 28, 11, 423.62, 1365.059655, 0.00060086, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 18, 63, 28, 12, 407.19, 1364.810054, 0.00060086, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 17, 63, 28, 13, 403.47, 1364.566508, 0.00060086, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 16, 63, 28, 14, 401.25, 1364.324746, 0.00060086, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 15, 63, 28, 15, 400.92,  1364.08375, 0.00060086, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 14, 63, 28, 16, 404.95, 1363.841642, 0.00060086, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 13, 63, 28, 17, 121.18, 1363.683577, 0.00060086, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 13, 64, 28, 18, 312.31, 1363.553344, 0.00060086, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 12, 64, 28, 19, 442.08, 1363.326702, 0.00060086, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 11, 64, 28, 20, 103.89, 1363.162676, 0.00060086, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 11, 64, 29,  1,  10.00, 1363.139732, 0.00042631, 0.5, 0.00, 0.3, 0.2, 3.5, 1),
            (2, 11, 64, 30,  1,   3.75, 1363.139732, 0.00042631, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 11, 65, 30,  2, 511.47, 1363.029911, 0.00042631, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 11, 66, 30,  3,   15.9, 1362.917499, 0.00042631, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 10, 66, 30,  4, 495.57, 1362.808477, 0.00042631, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 10, 67, 30,  5, 146.28, 1362.671663, 0.00042631, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2,  9, 67, 30,  6, 365.19, 1362.562641, 0.00042631, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2,  9, 68, 30,  7, 331.57, 1362.414123, 0.00042631, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2,  8, 68, 30,  8, 134.03, 1362.314878, 0.00042631, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2,  8, 69, 30,  9, 453.71, 1362.189598, 0.00042631, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2,  8, 70, 30, 10, 259.76, 1362.037519, 0.00042631, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2,  7, 70, 30, 11, 188.51, 1361.941968, 0.00042631, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2,  7, 71, 30, 12, 422.56, 1361.811715, 0.00042631, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2,  7, 72, 30, 13, 422.56, 1361.631573, 0.00042631, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2,  7, 73, 30, 14, 153.88, 1361.508702, 0.00042631, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2,  6, 73, 30, 15, 268.43, 1361.418685, 0.00042631, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2,  6, 73, 31,  1,  10.00, 1361.411116, 0.00005634, 0.5, 0.00, 0.3, 0.2, 3.5, 1),
            (2,  6, 73, 32,  1,  10.25, 1361.411116, 0.00005634, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2,  6, 74, 32,  2, 411.27, 1361.399524, 0.00005634, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2,  6, 75, 32,  3, 400.98, 1361.376643, 0.00005634, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2,  6, 76, 32,  4, 400.98, 1361.354051, 0.00005634, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2,  6, 77, 32,  5, 401.23, 1361.331453, 0.00005634, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2,  6, 78, 32,  6, 401.47, 1361.308841, 0.00005634, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2,  6, 79, 32,  7, 401.47, 1361.286222, 0.00005634, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2,  6, 80, 32,  8, 401.47, 1361.263603, 0.00005634, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2,  6, 81, 32,  9, 403.68, 1361.240922, 0.00005634, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2,  6, 82, 32, 10, 275.52, 1361.221789, 0.00005634, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2,  7, 82, 32, 11, 137.32,  1361.21016, 0.00005634, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2,  7, 83, 32, 12, 412.83, 1361.194662, 0.00005634, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2,  7, 84, 32, 13, 481.66, 1361.169464, 0.00005634, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2,  8, 84, 32, 14,  10.86,  1361.15559, 0.00005634, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2,  8, 85, 32, 15, 394.23, 1361.144178, 0.00005634, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2,  9, 85, 32, 16,  58.72, 1361.131419, 0.00005634, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2,  9, 84, 32, 17, 416.64, 1361.118028, 0.00005634, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 10, 84, 32, 18,  284.3, 1361.098282, 0.00005634, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 10, 83, 32, 19, 186.62, 1361.085017, 0.00005634, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 11, 83, 32, 20, 433.95, 1361.067535, 0.00005634, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 12, 83, 32, 21, 385.31, 1361.044457, 0.00005634, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 12, 82, 32, 22,  48.63, 1361.032233, 0.00005634, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 13, 82, 32, 23, 433.95, 1361.018638, 0.00005634, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 14, 82, 32, 24,  426.2, 1360.994408, 0.00005634, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 15, 82, 32, 25, 191.46, 1360.977008, 0.00005634, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 15, 81, 32, 26,  234.5, 1360.965009, 0.00005634, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 16, 81, 32, 27, 425.92, 1360.946405, 0.00005634, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 17, 81, 32, 28, 420.81, 1360.922553, 0.00005634, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 18, 81, 32, 29, 136.45, 1360.906855, 0.00005634, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 18, 80, 32, 30, 284.36,    1360.895, 0.00005634, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 19, 80, 32, 31, 279.91, 1360.879105, 0.00005634, 0.5, 0.04, 0.3, 0.2, 3.5, 1), 
            (2, 19, 80, 33,  1,  10.00, 1360.879105, 0.00005634, 0.5, 0.00, 0.3, 0.2, 3.5, 1),
            (2, 34, 39, 34,  1,  48.78,     1369.19, 0.01654022, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 34, 40, 34,  2, 450.11,     1368.39, 0.00177148, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 35, 40, 34,  3, 121.83,      1368.4, 0.01020869, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 35, 41, 34,  4, 440.91,     1367.14, 0.00507151, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 35, 42, 34,  5, 430.81,     1366.16, 0.00482323, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 35, 43, 34,  6,  434.3,     1365.07, 0.00535198, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 35, 44, 34,  7, 409.27,     1363.84, 0.00639619, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 35, 45, 34,  8, 416.89,     1362.45, 0.00871085, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 35, 46, 34,  9, 451.87,     1360.21, 0.00732544, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 35, 47, 34, 10,  93.36,     1359.14, 0.01126214, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 36, 47, 34, 11, 176.05,     1359.15, 0.01126214, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 44, 45, 35,  1,  466.8,     1374.41, 0.00051254, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 43, 44, 35,  2, 462.57,     1374.17, 0.00121656, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 42, 44, 35,  3, 400.71,     1373.84, 0.00130656, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 41, 44, 35,  4, 400.04,     1373.64, 0.00104115, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 40, 44, 35,  5, 400.04,     1373.43, 0.00113391, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 39, 44, 35,  6, 400.32,     1373.19, 0.00124106, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 38, 44, 35,  7, 422.89,     1372.93, 0.00942612, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 37, 44, 35,  8,  78.97,      1369.2, 0.06170835, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 37, 45, 35,  9, 530.29,     1368.06, 0.01800995, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 36, 46, 35, 10, 443.74,     1359.65, 0.02231594, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 36, 47, 35, 11, 244.95,     1358.15, 0.02231594, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 36, 47, 36,  1, 179.59,     1359.15,  0.0051019, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 36, 48, 36,  2, 405.75,     1358.24, 0.00423052, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 36, 49, 36,  3, 200.36,     1357.44, 0.00590677, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 35, 49, 36,  4, 391.25,     1357.05, 0.00326322, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 35, 50, 36,  5, 179.64,     1356.16, 0.00462962, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 34, 50, 36,  6, 275.79,     1356.22,  0.0051398, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 34, 51, 36,  7, 418.64,     1354.74, 0.00632277, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 34, 52, 36,  8, 401.56,     1353.58, 0.00708535, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 34, 53, 36,  9, 400.05,      1351.9, 0.00706881, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 34, 54, 36, 10, 435.79,     1350.75, 0.00466865, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 34, 55, 36, 11, 102.63,     1349.86, 0.00712449, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 35, 55, 36, 12, 330.26,     1350.02, 0.00142782, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 35, 56, 36, 13, 405.28,     1349.39, 0.00251712, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 35, 57, 36, 14, 403.92,        1349, 0.00334698, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 35, 58, 36, 15, 438.92,     1348.04, 0.00391033, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 35, 59, 36, 16, 129.73,     1347.28, 0.00534287, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 36, 59, 36, 17,  342.7,     1347.35, 0.00005913, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 36, 60, 36, 18,  55.61,     1347.26, 0.00005913, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 36, 60, 37,  1, 344.63,     1347.26,  0.0007783, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 36, 61, 37,  2, 400.25,  1346.97013,  0.0007783, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 36, 62, 37,  3, 400.27, 1346.658608,  0.0007783, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 36, 63, 37,  4, 403.59, 1346.345785,  0.0007783, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 36, 64, 37,  5, 415.91, 1346.026877,  0.0007783, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 36, 65, 37,  6, 390.31, 1345.713137,  0.0007783, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 37, 65, 37,  7,  29.67, 1345.549701,  0.0007783, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 37, 66, 37,  8, 426.47, 1345.372194,  0.0007783, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 37, 67, 37,  9, 391.77, 1345.053776,  0.0007783, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 38, 67, 37, 10,  136.8, 1344.848083,  0.0007783, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 38, 68, 37, 11, 434.77, 1344.625657,  0.0007783, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 39, 68, 37, 12, 103.73,   1344.4161,  0.0007783, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 39, 69, 37, 13, 469.12, 1344.193175,  0.0007783, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 39, 70, 37, 14, 183.42, 1343.939239,  0.0007783, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 40, 70, 37, 15,  298.2, 1343.751817,  0.0007783, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 40, 71, 37, 16, 298.56, 1343.519587,  0.0007783, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 41, 71, 37, 17, 399.79, 1343.247825,  0.0007783, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 41, 72, 37, 18,  79.43, 1343.061336,  0.0007783, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 42, 72, 37, 19, 434.41, 1342.861375,  0.0007783, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 43, 72, 37, 20, 431.08,  1342.52457,  0.0007783, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 44, 72, 37, 21,   75.3, 1342.327512,  0.0007783, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 44, 73, 37, 22, 352.95, 1342.160859,  0.0007783, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 45, 73, 37, 23, 416.36, 1341.861482,  0.0007783, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 46, 73, 37, 24, 412.96, 1341.538752,  0.0007783, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 47, 73, 37, 25, 230.79, 1341.288236,  0.0007783, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 47, 74, 37, 26, 182.22, 1341.127514,  0.0007783, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 48, 74, 37, 27, 413.01,  1340.89588,  0.0007783, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 49, 74, 37, 28, 422.65, 1340.570683,  0.0007783, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 50, 74, 37, 29, 250.39, 1340.308769,  0.0007783, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 50, 75, 37, 30, 209.29, 1340.129885,  0.0007783, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 51, 75, 37, 31, 484.55, 1339.859877,  0.0007783, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 52, 75, 37, 32,  41.52, 1339.655157,  0.0007783, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 52, 76, 37, 33, 446.14, 1339.465384,  0.0007783, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 53, 76, 37, 34, 253.14, 1339.193259,  0.0007783, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 53, 77, 37, 35,   2.28, 1339.093862,  0.0007783, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 53, 77, 38,  1,  10.00, 1339.093862,  0.0007783, 0.5, 0.00, 0.3, 0.2, 3.5, 1),
            (2, 53, 77, 39,  1, 214.03, 1339.029741, 0.00059287, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 54, 77, 39,  2, 449.42, 1338.833071, 0.00059287, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 55, 77, 39,  3, 211.13, 1338.637261, 0.00059287, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 55, 78, 39,  4, 238.29, 1338.504037, 0.00059287, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 56, 78, 39,  5, 448.05, 1338.300582, 0.00059287, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 57, 78, 39,  6, 207.87, 1338.106144, 0.00059287, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 57, 79, 39,  7,  235.4, 1337.974743, 0.00059287, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 58, 79, 39,  8, 443.27, 1337.773562, 0.00059287, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 59, 79, 39,  9, 249.59, 1337.568174, 0.00059287, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 59, 80, 39, 10, 191.39, 1337.437452, 0.00059287, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 60, 80, 39, 11, 434.13, 1337.252026, 0.00059287, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 60, 80, 40,  1,  10.00, 1337.252026, 0.00059287, 0.5, 0.00, 0.3, 0.2, 3.5, 1),
            (2, 60, 80, 41,  1,   3.37, 1337.206569,  0.0002078, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 61, 80, 41,  2, 357.47, 1337.169078,  0.0002078, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 61, 81, 41,  3,  80.03, 1337.123622,  0.0002078, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 62, 81, 41,  4,    414, 1337.072292,  0.0002078, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 63, 81, 41,  5, 361.44, 1336.991724,  0.0002078, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 62, 81, 41,  6, 402.94, 1336.912305,  0.0002078, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 61, 81, 41,  7, 404.53, 1336.828409,  0.0002078, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 60, 81, 41,  8, 272.49, 1336.758066,  0.0002078, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 60, 82, 41,  9, 132.03, 1336.716037,  0.0002078, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 59, 82, 41, 10, 404.53, 1336.660288,  0.0002078, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 58, 82, 41, 11, 405.09, 1336.576169,  0.0002078, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 57, 82, 41, 12, 405.12, 1336.491988,  0.0002078, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 56, 82, 41, 13, 405.12, 1336.407804,  0.0002078, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 55, 82, 41, 14, 405.12,  1336.32362,  0.0002078, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 54, 82, 41, 15, 247.83, 1336.255779,  0.0002078, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 54, 83, 41, 16, 183.33, 1336.210981,  0.0002078, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 53, 83, 41, 17, 449.44, 1336.145236,  0.0002078, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 52, 83, 41, 18, 244.46,  1336.07314,  0.0002078, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 52, 84, 41, 19, 205.32, 1336.026408,  0.0002078, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 51, 84, 41, 20, 471.25, 1335.956112,  0.0002078, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 50, 84, 41, 21,  88.57, 1335.897947,  0.0002078, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 50, 85, 41, 22, 433.13, 1335.843742,  0.0002078, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 49, 85, 41, 23, 189.94, 1335.779005,  0.0002078, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 49, 86, 41, 24, 331.76, 1335.724801,  0.0002078, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 48, 86, 41, 25, 291.31, 1335.660064,  0.0002078, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 48, 87, 41, 26, 230.39, 1335.605859,  0.0002078, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 47, 87, 41, 27, 392.69, 1335.541121,  0.0002078, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 47, 88, 41, 28, 131.58, 1335.486649,  0.0002078, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 46, 88, 41, 29,  386.5, 1335.432821,  0.0002078, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 46, 89, 41, 30, 298.23, 1335.361677,  0.0002078, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 45, 89, 41, 31,  194.6, 1335.310472,  0.0002078, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 45, 90, 41, 32, 473.02, 1335.241107,  0.0002078, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 45, 91, 41, 33, 108.13, 1335.180725,  0.0002078, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 44, 91, 41, 34,  321.6, 1335.136076,  0.0002078, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 44, 92, 41, 35, 427.41, 1335.058254,  0.0002078, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 44, 93, 41, 36, 416.22, 1334.970601,  0.0002078, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 44, 94, 41, 37,  63.49, 1334.920759,  0.0002078, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 43, 94, 41, 38, 352.61, 1334.877526,  0.0002078, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 43, 94, 42,  1,  10.00, 1334.877526,  0.0002078, 0.5, 0.00, 0.3, 0.2, 3.5, 1),
            (2, 43, 94, 43,  1,  10.11, 1334.829992, 0.00026953, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 43, 95, 43,  2, 442.68, 1334.770319, 0.00026953, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 43, 96, 43,  3, 413.23, 1334.654973, 0.00026953, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 43, 97, 43,  4, 306.77, 1334.557942, 0.00026953, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 42, 97, 43,  5, 119.89, 1334.500443, 0.00026953, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 42, 98, 43,  6, 495.14, 1334.417559, 0.00026953, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 42, 99, 43,  7,  76.08, 1334.340578, 0.00026953, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 41, 99, 43,  8, 397.74, 1334.276724, 0.00026953, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 41,100, 43,  9, 403.77, 1334.168708, 0.00026953, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 41,101, 43, 10, 423.72, 1334.057192, 0.00026953, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 42,101, 43, 11,   5.81, 1333.999306, 0.00026953, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 42,102, 43, 12, 416.42, 1333.942404, 0.00026953, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 42,103, 43, 13, 408.19, 1333.831276, 0.00026953, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 42,104, 43, 14, 403.05, 1333.721949, 0.00026953, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 42,105, 43, 15, 405.74, 1333.612952, 0.00026953, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 42,106, 43, 16, 423.41, 1333.501212, 0.00026953, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 42,107, 43, 17, 349.29, 1333.397079, 0.00026953, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 43,107, 43, 18, 116.15, 1333.334354, 0.00026953, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 43,108, 43, 19, 478.07, 1333.254274, 0.00026953, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 43,109, 43, 20, 238.42, 1333.157716, 0.00026953, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 44,109, 43, 21, 181.44, 1333.101134, 0.00026953, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 44,110, 43, 22, 407.35, 1333.021785, 0.00026953, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 44,111, 43, 23, 420.47, 1332.910224, 0.00026953, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 44,112, 43, 24, 424.66,  1332.79633, 0.00026953, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 44,113, 43, 25,  28.88, 1332.735209, 0.00026953, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 45,113, 43, 26, 379.95, 1332.680113, 0.00026953, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 45,114, 43, 27, 417.11, 1332.572697, 0.00026953, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 45,115, 43, 28,  13.14, 1332.514714, 0.00026953, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 44,115, 43, 29, 511.77, 1332.443975, 0.00026953, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 44,116, 43, 30,  75.85, 1332.364784, 0.00026953, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 43,116, 43, 31, 435.71, 1332.295844, 0.00026953, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 42,116, 43, 32, 378.81, 1332.186075, 0.00026953, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 42,117, 43, 33, 113.93, 1332.119671, 0.00026953, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (1, 41,117, 43, 34, 377.94, 1332.053384, 0.00026953, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (1, 41,118, 43, 35, 408.67, 1331.947377, 0.00026953, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (1, 41,119, 43, 36, 403.41, 1331.837937, 0.00026953, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 41,120, 43, 37, 144.42, 1331.764108, 0.00026953, 0.5, 0.04, 0.3, 0.2, 3.5, 1),
            (2, 41,120, 44,  1,  10.00, 1331.764108, 0.00026953, 0.5, 0.00, 0.3, 0.2, 3.5, 1),
            (2, 64, 81, 45,  1, 260.22,     1337.75, 0.00176149, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 63, 81, 45,  2, 161.77,     1337.29, 0.00176149, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 63, 81, 46,  1, 241.23,     1336.29, 0.00204946, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 62, 81, 46,  2, 400.96,     1335.79, 0.00256772, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 61, 81, 46,  3, 400.51,     1335.26, 0.00279033, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 60, 81, 46,  4,    400,     1334.67, 0.00305084, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 59, 81, 46,  5, 400.67,     1334.04,  0.0033489, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 58, 81, 46,  6, 405.54,     1333.33, 0.00366359, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 57, 81, 46,  7, 408.64,     1332.55,   0.004054, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 56, 81, 46,  8, 402.05,     1331.68, 0.00462112, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 55, 81, 46,  9, 400.45,     1330.69, 0.00508762, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 54, 81, 46, 10, 402.59,     1329.64, 0.00503156, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 53, 81, 46, 11, 405.02,     1328.67, 0.00447958, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 52, 81, 46, 12, 405.38,     1327.82, 0.00383936, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 51, 81, 46, 13, 401.08,     1327.11, 0.00329676, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 50, 81, 46, 14, 409.88,      1326.5, 0.00279384, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 49, 81, 46, 15, 410.01,     1325.97, 0.00251902, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 48, 81, 46, 16, 402.37,     1325.47, 0.00243096, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 47, 81, 46, 17, 402.67,     1324.99, 0.00239947, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 46, 81, 46, 18, 409.59,      1324.5, 0.00238695, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 45, 81, 46, 19,  409.7,     1324.01, 0.00230703, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 44, 81, 46, 20, 410.73,     1323.56, 0.00194847, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 43, 81, 46, 21, 406.38,     1323.21, 0.00137275, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 42, 81, 46, 22, 416.71,        1323, 0.00049419, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 41, 81, 46, 23, 439.56,        1323,     0.0001, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 40, 81, 46, 24, 225.17,      1323.1,     0.0001, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 40, 82, 46, 25, 277.06,     1323.01,     0.0001, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 39, 82, 46, 26, 405.98,     1323.14,     0.0001, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 39, 83, 46, 27, 279.47,     1323.01,     0.0001, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 38, 83, 46, 28, 305.09,     1323.29, 0.00006162, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 38, 84, 46, 29, 169.24,     1322.99, 0.01043544, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 37, 84, 46, 30, 406.55,     1321.52, 0.00689003, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 36, 84, 46, 31, 299.94,     1320.19, 0.00973773, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 36, 85, 46, 32, 455.76,      1318.6,   0.005807, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 36, 86, 46, 33,  113.3,     1317.55, 0.01072498, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 35, 86, 46, 34, 179.83,     1317.38, 0.01072498, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 36, 60, 47,  1, 210.06,     1347.26, 0.00388542, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 35, 60, 47,  2,  194.7,     1346.44, 0.00716449, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 35, 61, 47,  3,  437.8,     1345.86,  0.0027612, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 35, 62, 47,  4, 404.76,     1345.23, 0.00325289, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 35, 63, 47,  5, 404.37,     1344.55, 0.00368078, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 35, 64, 47,  6, 329.93,     1343.75, 0.00317116, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 34, 64, 47,  7, 181.21,      1343.5, 0.00587207, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 34, 65, 47,  8, 413.24,     1342.68,  0.0040109, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 34, 66, 47,  9, 432.18,     1341.84, 0.00236669, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 34, 67, 47, 10, 107.27,     1341.66, 0.01203665, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 35, 67, 47, 11, 429.74,     1340.55, 0.00495133, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 35, 68, 47, 12, 412.45,     1339.53, 0.00523619, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 35, 69, 47, 13,  434.3,     1338.39, 0.00555745, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 35, 70, 47, 14,  405.8,     1337.12, 0.00668707, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 35, 71, 47, 15, 403.81,     1335.68, 0.00755311, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 35, 72, 47, 16, 402.01,     1334.07, 0.00927132, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 35, 73, 47, 17, 371.26,     1331.95, 0.00504869, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 34, 73, 47, 18,  40.67,     1332.19, 0.00504869, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2,  7, 73, 48,  1, 254.94,     1359.69, 0.00282411, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2,  8, 74, 48,  2,  462.3,     1358.97, 0.00260724, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2,  9, 74, 48,  3, 401.25,     1358.49, 0.00229692, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 10, 74, 48,  4, 401.14,     1358.05, 0.00207357, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 11, 74, 48,  5, 401.22,     1357.66, 0.00188632, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 12, 74, 48,  6, 497.46,     1357.29, 0.00141122, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 13, 73, 48,  7, 471.59,     1356.95, 0.00143972, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 14, 73, 48,  8, 410.14,     1356.61, 0.00162535, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 15, 73, 48,  9, 401.54,     1356.29, 0.00161851, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 16, 73, 48, 10, 401.54,     1355.96, 0.00158933, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 17, 73, 48, 11, 515.44,     1355.65, 0.00119265, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 18, 72, 48, 12, 505.17,     1355.35, 0.00132081, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 19, 72, 48, 13, 402.76,     1354.98, 0.00182215, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 20, 72, 48, 14, 401.82,     1354.62, 0.00176961, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 21, 72, 48, 15, 372.08,     1354.27, 0.00066173, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 21, 71, 48, 16, 236.67,     1354.37, 0.00124664, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 22, 71, 48, 17, 408.59,     1353.97, 0.00182662, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 23, 71, 48, 18, 402.29,     1353.62, 0.00160853, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 24, 71, 48, 19, 401.13,     1353.33, 0.00133321, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 25, 71, 48, 20, 400.29,     1353.09, 0.00110058, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 26, 71, 48, 21, 400.29,     1352.89, 0.00105301, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 27, 71, 48, 22, 400.51,     1352.67, 0.00141665, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 28, 71, 48, 23, 402.33,     1352.32, 0.00252041, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 29, 71, 48, 24, 400.35,     1351.65,   0.004898, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 30, 71, 48, 25, 400.06,     1350.36, 0.00918898, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 31, 71, 48, 26,    400,     1347.98, 0.01596191, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 32, 71, 48, 27, 483.33,     1343.97, 0.02070363, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 33, 72, 48, 28, 565.69,     1337.97, 0.02259298, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 34, 73, 48, 29, 506.78,     1331.19, 0.02259298, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 34, 73, 49,  1,  58.28,     1332.19, 0.02671392, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 34, 74, 49,  2, 405.79,     1330.64, 0.00656755, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 34, 75, 49,  3, 404.77,     1329.53, 0.00343586, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 34, 76, 49,  4, 412.03,     1329.25, 0.00214853, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 34, 77, 49,  5,  72.68,     1328.64, 0.03700559, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 35, 77, 49,  6, 538.89,     1326.56, 0.00412494, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 36, 77, 49,  7, 101.39,     1326.42, 0.01026757, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 36, 78, 49,  8, 408.11,     1325.52, 0.00392848, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 36, 79, 49,  9,  400.7,     1324.82,  0.0029779, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 36, 80, 49, 10, 406.23,     1324.32, 0.00171283, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 36, 81, 49, 11, 207.12,     1324.12, 0.00176632, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 35, 81, 49, 12, 412.54,     1323.96,  0.0002024, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 34, 81, 49, 13,  302.9,     1324.04,  0.0002024, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 19, 80, 50,  1, 135.06,     1359.84,     0.0001, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 20, 80, 50,  2, 403.35,     1360.01,     0.0001, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 21, 80, 50,  3, 403.35,     1360.14,     0.0001, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 22, 80, 50,  4, 403.35,     1360.22,     0.0001, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 23, 80, 50,  5, 403.35,     1360.23, 0.00311754, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 24, 79, 50,  6, 400.73,     1358.97, 0.00412848, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 25, 79, 50,  7, 400.73,     1358.57, 0.00277384, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 26, 79, 50,  8, 400.73,     1357.85, 0.00480137, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 27, 79, 50,  9, 400.73,     1356.65, 0.00778997, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 28, 79, 50, 10, 400.73,     1354.73, 0.01190017, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 29, 79, 50, 11, 400.73,     1351.88, 0.01694158, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 30, 79, 50, 12, 400.73,     1347.94, 0.02231442, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 31, 79, 50, 13, 403.09,     1342.94, 0.02823001, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 32, 79, 50, 14, 368.04,     1336.56, 0.01786612, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 32, 80, 50, 15, 104.76,     1336.36, 0.07084442, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 33, 80, 50, 16, 520.34,     1329.14, 0.01783838, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 33, 81, 50, 17,   1.18,     1327.08,33.10948422, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 34, 81, 50, 18, 379.95,     1323.04,33.10948422, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 34, 81, 51,  1,  49.92,     1324.04, 0.02713588, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 34, 82, 51,  2,  409.1,     1322.68, 0.00585675, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 34, 83, 51,  3, 424.37,     1321.64, 0.00549499, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 34, 84, 51,  4, 425.95,     1320.35, 0.00495499, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 34, 85, 51,  5, 139.44,     1319.53, 0.00815995, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 35, 85, 51,  6, 346.21,     1319.21, 0.00331471, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 35, 86, 51,  7, 173.05,     1318.38, 0.00331471, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 35, 86, 52,  1, 256.11,     1318.38, 0.00473774, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 35, 87, 52,  2,  329.2,     1317.17, 0.00316336, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 36, 87, 52,  3, 138.89,     1317.34, 0.00530251, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 36, 88, 52,  4, 407.31,     1316.43, 0.00383529, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 36, 89, 52,  5,  118.4,     1315.78, 0.00946568, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 35, 89, 52,  6, 328.19,     1315.31, 0.00283801, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 35, 90, 52,  7,  411.3,     1314.85,  0.0026177, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 35, 91, 52,  8, 402.46,     1314.24, 0.00299035, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 35, 92, 52,  9, 403.64,     1313.65, 0.00318244, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 35, 93, 52, 10, 408.35,     1312.95, 0.00367839, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 35, 94, 52, 11, 406.47,     1312.14, 0.00430052, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 35, 95, 52, 12, 402.98,      1311.2, 0.00641678, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 35, 96, 52, 13, 407.55,     1309.56, 0.00622377, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 35, 97, 52, 14, 427.23,     1308.67, 0.00455364, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 35, 98, 52, 15, 183.43,     1307.61, 0.00622641, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 34, 98, 52, 16, 295.32,     1307.53, 0.00353863, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 34, 99, 52, 17, 409.83,     1306.57, 0.00447201, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 34,100, 52, 18, 403.77,     1305.69, 0.00419177, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 34,101, 52, 19, 409.12,     1304.87, 0.00404321, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 34,102, 52, 20, 403.56,     1304.04, 0.00440594, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 34,103, 52, 21, 403.41,      1303.1, 0.00494987, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 34,104, 52, 22, 407.79,     1302.04, 0.00690144, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 34,105, 52, 23, 444.72,     1300.28, 0.00628445, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 34,106, 52, 24,  153.4,     1299.25, 0.00768617, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 35,106, 52, 25, 472.91,      1299.1, 0.00326168, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 35,107, 52, 26, 402.82,      1297.7, 0.00604416, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 35,108, 52, 27, 400.01,     1296.67, 0.00524823, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 35,109, 52, 28, 400.01,      1295.6,  0.0055421, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 35,110, 52, 29, 400.01,     1294.45, 0.00598215, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 35,111, 52, 30, 400.01,     1293.21, 0.00640389, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 35,112, 52, 31, 400.01,     1291.89, 0.00681891, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 35,113, 52, 32, 400.01,     1290.48, 0.00724554, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 35,114, 52, 33, 400.01,     1288.99, 0.00771122, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 35,115, 52, 34, 400.01,      1287.4,  0.0082538, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 35,116, 52, 35, 400.01,     1285.69, 0.00891937, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 35,117, 52, 36, 400.01,     1283.83, 0.01410656, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 35,118, 52, 37, 400.31,     1280.05, 0.01223551, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 35,119, 52, 38, 405.97,     1278.93, 0.01072728, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 35,120, 52, 39, 309.98,     1275.69, 0.00937082, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 34,120, 52, 40, 194.64,     1276.03, 0.01068239, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 34,121, 52, 41, 412.84,     1273.61, 0.01010671, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 34,122, 52, 42, 203.61,     1271.86, 0.01010671, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 41,120, 53,  1, 349.81,     1330.54, 0.02237955, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 40,121, 53,  2, 405.52,     1322.71, 0.04374895, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 39,121, 53,  3, 405.52,      1312.8, 0.05397623, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 38,121, 53,  4, 405.52,     1300.82, 0.05574143, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 37,121, 53,  5, 405.52,     1290.19, 0.05182963, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 36,121, 53,  6, 405.52,      1279.8, 0.04252981, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 35,121, 53,  7, 405.52,     1272.95, 0.02206081, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 34,122, 53,  8, 284.38,     1270.86, 0.02206081, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 34,122, 54,  1, 196.72,     1271.86, 0.00894793, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 34,123, 54,  2, 392.42,      1270.1, 0.00378266, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 35,123, 54,  3,  89.42,     1270.37,  0.0171206, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 35,124, 54,  4, 424.47,     1268.57, 0.00858873, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 35,125, 54,  5, 425.84,     1266.73, 0.00849633, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 35,126, 54,  6,  158.7,     1264.95,  0.0103605, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 34,126, 54,  7, 305.01,     1265.08, 0.00612617, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 34,127, 54,  8, 403.89,     1263.08, 0.01161482, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 34,128, 54,  9, 404.54,     1260.39, 0.01438186, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 34,129, 54, 10, 308.01,     1257.26, 0.00669736, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 35,129, 54, 11, 165.21,     1258.33,     0.0001, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 35,130, 54, 12, 287.64,      1259.4, 0.01206255, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 34,130, 54, 13,  257.2,     1254.86, 0.02815924, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 34,131, 54, 14, 406.25,     1252.16, 0.01400766, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 34,132, 54, 15, 400.81,     1249.17,  0.0095884, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 34,133, 54, 16, 181.22,     1248.32,  0.0095884, 0.5, 0.25, 0.3, 0.2, 3.5, 1),
            (2, 35, 18, 55,  1, 100.00,     1400.0 ,     0.1300, 0.5, 0.25, 0.3, 0.2, 3.5, 1)]

#               WEL  ->  UZF  
#            -------- --------
#            Row  Col Row  Col
wellconn = [( 39,  24, 37,  24),    # This file is a list of the wel -> uzf     
            ( 39,  24, 37,  25),    # connections that were used in the original
            ( 39,  24, 38,  24),    # MODSIM/MODFLOW-NWT effort.  In MODFLOW6,  
            ( 39,  24, 39,  24),    # these connection will instead be defined  
            ( 40,  24, 40,  24),    # using the mover package.  The basic idea  
            ( 40,  24, 40,  25),    # is that a well will service the fields in 
            ( 40,  24, 39,  25),    # its general vicinity and will not service 
            ( 40,  24, 39,  26),    # fields that are uphill or more than 4     
            ( 42,  26, 42,  26),    # cells away (~ 4 cells is roughly 1 mile   
            ( 42,  26, 41,  25),    # in this model)                            
            ( 42,  26, 41,  26),    
            ( 42,  26, 41,  27),    
            ( 39,  28, 39,  28),    
            ( 39,  28, 37,  27),    
            ( 39,  28, 37,  28),
            ( 39,  28, 38,  27),
            ( 42,  28, 42,  28),
            ( 42,  28, 41,  29),
            ( 42,  28, 40,  27),
            ( 42,  28, 40,  28),
            ( 39,  29, 39,  29),
            ( 39,  29, 38,  29),
            ( 39,  29, 39,  30),
            ( 39,  29, 39,  31),
            ( 42,  31, 42,  31),
            ( 42,  31, 41,  31),
            ( 42,  31, 40,  31),
            ( 42,  31, 40,  30),
            ( 37,  31, 37,  31),
            ( 37,  31, 37,  30),
            ( 37,  31, 36,  31),
            ( 37,  31, 38,  32),
            ( 37,  34, 37,  36),
            ( 37,  34, 38,  35),
            ( 37,  34, 37,  34),
            ( 37,  34, 37,  33),
            ( 42,  33, 42,  33),
            ( 42,  33, 42,  32),
            ( 42,  33, 42,  34),
            ( 42,  33, 41,  33),
            ( 41,  34, 41,  34),
            ( 41,  34, 40,  34),
            ( 41,  34, 40,  33),
            ( 41,  34, 40,  32),
            ( 39,  34, 39,  34),
            ( 39,  34, 39,  35),
            ( 39,  34, 39,  36),
            ( 39,  34, 40,  36),
            ( 43,  35, 43,  35),
            ( 43,  35, 43,  34),
            ( 43,  35, 43,  36),
            ( 43,  35, 41,  35),
            ( 46,  36, 46,  36),
            ( 46,  36, 45,  35),
            ( 46,  36, 44,  35),
            ( 46,  36, 44,  36),
            ( 39,  37, 39,  37),
            ( 39,  37, 38,  37),
            ( 39,  37, 38,  39),
            ( 39,  37, 37,  39),
            ( 42,  37, 42,  37),
            ( 42,  37, 41,  36),
            ( 42,  37, 41,  37),
            ( 42,  37, 42,  38),
            ( 48,  38, 48,  38),
            ( 48,  38, 47,  37),
            ( 48,  38, 46,  37),
            ( 48,  38, 46,  38),
            ( 44,  37, 44,  37),
            ( 44,  37, 43,  37),
            ( 44,  37, 44,  38),
            ( 44,  37, 45,  39),
            ( 37,  41, 37,  41),
            ( 37,  41, 38,  42),
            ( 37,  41, 36,  40),
            ( 37,  41, 36,  37),
            ( 40,  42, 40,  42),
            ( 40,  42, 41,  43),
            ( 40,  42, 39,  43),
            ( 40,  42, 39,  41),
            ( 41,  40, 41,  40),
            ( 41,  40, 40,  39),
            ( 41,  40, 40,  40),
            ( 41,  40, 41,  41),
            ( 44,  40, 44,  40),
            ( 44,  40, 43,  39),
            ( 44,  40, 42,  39),
            ( 44,  40, 42,  41),
            ( 43,  42, 43,  41),
            ( 43,  42, 42,  42),
            ( 43,  42, 43,  43),
            ( 43,  42, 44,  42),
            ( 48,  39, 48,  39),
            ( 48,  39, 48,  40),
            ( 48,  39, 47,  39),
            ( 48,  39, 47,  40),
            ( 46,  40, 46,  40),
            ( 46,  40, 46,  39),
            ( 46,  40, 45,  40),
            ( 46,  40, 45,  41),
            ( 47,  42, 47,  41),
            ( 47,  42, 46,  42),
            ( 47,  42, 48,  42),
            ( 47,  42, 47,  43),
            ( 46,  43, 46,  43),
            ( 46,  43, 45,  42),
            ( 46,  43, 45,  43),
            ( 46,  43, 45,  44),
            ( 51,  42, 51,  42),
            ( 51,  42, 50,  42),
            ( 51,  42, 50,  41),
            ( 51,  42, 49,  41),
            ( 49,  43, 49,  43),
            ( 49,  43, 49,  42),
            ( 49,  43, 49,  44),
            ( 49,  43, 48,  44),
            ( 47,  44, 47,  44),
            ( 47,  44, 47,  45),
            ( 47,  44, 47,  46),
            ( 47,  44, 47,  47),
            ( 46,  46, 46,  46),
            ( 46,  46, 45,  45),
            ( 46,  46, 45,  46),
            ( 46,  46, 45,  47),
            ( 52,  43, 51,  43),
            ( 52,  43, 52,  43),
            ( 52,  43, 52,  44),
            ( 52,  43, 52,  45),
            ( 52,  46, 52,  46),
            ( 52,  46, 52,  47),
            ( 52,  46, 51,  46),
            ( 52,  46, 51,  47),
            ( 49,  46, 49,  46),
            ( 49,  46, 49,  45),
            ( 49,  46, 50,  46),
            ( 49,  46, 48,  47),
            ( 51,  49, 51,  49),
            ( 51,  49, 51,  48),
            ( 51,  49, 50,  48),
            ( 51,  49, 50,  49),
            ( 50,  50, 50,  50),
            ( 50,  50, 50,  51),
            ( 50,  50, 49,  50),
            ( 50,  50, 49,  51),
            ( 49,  48, 49,  48),
            ( 49,  48, 48,  48),
            ( 49,  48, 47,  48),
            ( 49,  48, 48,  49),
            ( 48,  51, 48,  50),
            ( 48,  51, 47,  50),
            ( 48,  51, 47,  51),
            ( 48,  51, 48,  52),
            ( 46,  50, 46,  50),
            ( 46,  50, 46,  49),
            ( 46,  50, 45,  48),
            ( 46,  50, 45,  50),
            ( 47,  53, 47,  53),
            ( 47,  53, 47,  52),
            ( 47,  53, 46,  52),
            ( 47,  53, 46,  53),
            ( 44,  53, 45,  53),
            ( 44,  53, 44,  52),
            ( 44,  53, 43,  53),
            ( 44,  53, 44,  54),
            ( 43,  48, 44,  48),
            ( 43,  48, 42,  48),
            ( 43,  48, 43,  47),
            ( 43,  48, 43,  46),
            ( 41,  47, 41,  47),
            ( 41,  47, 40,  47),
            ( 41,  47, 40,  46),
            ( 41,  47, 39,  47),
            ( 40,  49, 40,  49),
            ( 40,  49, 40,  48),
            ( 40,  49, 39,  49),
            ( 40,  49, 38,  48),
            ( 40,  50, 40,  50),
            ( 40,  50, 40,  51),
            ( 40,  50, 39,  52),
            ( 40,  50, 38,  50),
            ( 42,  52, 42,  51),
            ( 42,  52, 41,  52),
            ( 42,  52, 42,  53),
            ( 42,  52, 42,  54),
            ( 48,  57, 48,  56),
            ( 48,  57, 47,  57),
            ( 48,  57, 48,  58),
            ( 48,  57, 48,  59),
            ( 47,  56, 47,  55),
            ( 47,  56, 46,  55),
            ( 47,  56, 46,  56),
            ( 47,  56, 46,  57),
            ( 47,  58, 47,  59),
            ( 47,  58, 46,  58),
            ( 47,  58, 46,  59),
            ( 47,  58, 45,  58),
            ( 45,  56, 45,  56),
            ( 45,  56, 44,  56),
            ( 45,  56, 44,  57),
            ( 45,  56, 44,  58),
            ( 43,  56, 43,  56),
            ( 43,  56, 42,  55),
            ( 43,  56, 42,  57),
            ( 43,  56, 42,  58),
            ( 41,  56, 41,  55),
            ( 41,  56, 41,  56),
            ( 41,  56, 41,  57),
            ( 41,  56, 40,  54),
            ( 43,  60, 43,  60),
            ( 43,  60, 42,  60),
            ( 43,  60, 42,  61),
            ( 43,  60, 41,  60),
            ( 46,  61, 46,  60),
            ( 46,  61, 45,  60),
            ( 46,  61, 44,  60),
            ( 46,  61, 45,  61),
            ( 44,  62, 44,  62),
            ( 44,  62, 44,  61),
            ( 44,  62, 44,  63),
            ( 44,  62, 43,  62),
            ( 44,  64, 41,  63),
            ( 44,  64, 42,  64),
            ( 44,  64, 43,  64),
            ( 44,  64, 44,  65),
            ( 46,  62, 46,  62),
            ( 46,  62, 46,  63),
            ( 46,  62, 45,  63),
            ( 46,  62, 45,  64),
            ( 48,  64, 48,  63),
            ( 48,  64, 48,  65),
            ( 48,  64, 47,  64),
            ( 48,  64, 46,  65),
            ( 49,  61, 49,  61),
            ( 49,  61, 48,  61),
            ( 49,  61, 47,  61),
            ( 49,  61, 48,  62),
            ( 50,  62, 51,  63),
            ( 50,  62, 50,  63),
            ( 50,  62, 49,  62),
            ( 50,  62, 49,  63),
            ( 50,  62, 49,  64),
            ( 52,  65, 52,  64),
            ( 52,  65, 51,  65),
            ( 52,  65, 50,  65),
            ( 52,  65, 49,  65),
            ( 32,  28, 32,  28),
            ( 32,  28, 33,  28),
            ( 32,  28, 32,  29),
            ( 32,  28, 33,  30),
            ( 31,  31, 31,  30),
            ( 31,  31, 31,  32),
            ( 31,  31, 32,  31),
            ( 31,  31, 33,  32),
            ( 28,  32, 28,  31),
            ( 28,  32, 29,  31),
            ( 28,  32, 30,  33),
            ( 28,  32, 31,  33),
            ( 28,  29, 28,  29),
            ( 28,  29, 28,  30),
            ( 28,  29, 29,  29),
            ( 28,  29, 30,  29),
            ( 26,  29, 26,  29),
            ( 26,  29, 26,  30),
            ( 26,  29, 27,  29),
            ( 26,  29, 27,  31),
            ( 24,  30, 24,  30),
            ( 24,  30, 25,  29),
            ( 24,  30, 25,  31),
            ( 24,  30, 26,  32),
            ( 24,  27, 24,  27),
            ( 24,  27, 25,  28),
            ( 24,  27, 24,  28),
            ( 24,  27, 23,  28),
            ( 23,  29, 23,  29),
            ( 23,  29, 24,  29),
            ( 23,  29, 22,  29),
            ( 23,  29, 22,  28),
            ( 26,  36, 26,  36),
            ( 26,  36, 27,  35),
            ( 26,  36, 28,  35),
            ( 26,  36, 27,  37),
            ( 31,  38, 31,  37),
            ( 31,  38, 31,  39),
            ( 31,  38, 32,  38),
            ( 31,  38, 32,  39),
            ( 29,  37, 29,  38),
            ( 29,  37, 29,  39),
            ( 29,  37, 30,  36),
            ( 29,  37, 30,  37),
            ( 27,  38, 27,  38),
            ( 27,  38, 27,  39),
            ( 27,  38, 28,  37),
            ( 27,  38, 28,  38),
            ( 27,  38, 28,  39),
            ( 31,  41, 31,  41),
            ( 31,  41, 31,  42),
            ( 31,  41, 31,  43),
            ( 31,  41, 32,  41),
            ( 31,  41, 32,  43),
            ( 19,  28, 19,  28),
            ( 19,  28, 20,  27),
            ( 19,  28, 21,  27),
            ( 19,  28, 21,  28),
            ( 19,  30, 19,  30),
            ( 19,  30, 19,  31),
            ( 19,  30, 20,  29),
            ( 19,  30, 20,  30),
            ( 21,  30, 21,  30),
            ( 21,  30, 21,  29),
            ( 21,  30, 22,  30),
            ( 21,  30, 22,  31),
            ( 19,  33, 19,  32),
            ( 19,  33, 19,  33),
            ( 19,  33, 20,  33),
            ( 19,  33, 20,  34),
            ( 21,  33, 21,  33),
            ( 21,  33, 22,  32),
            ( 21,  33, 22,  33),
            ( 21,  33, 21,  34),
            ( 24,  34, 24,  34),
            ( 24,  34, 24,  33),
            ( 24,  34, 24,  35),
            ( 24,  34, 25,  34),
            ( 21,  35, 21,  35),
            ( 21,  35, 22,  35),
            ( 21,  35, 22,  34),
            ( 21,  35, 23,  34),
            ( 20,  36, 20,  36),
            ( 20,  36, 20,  35),
            ( 20,  36, 21,  36),
            ( 20,  36, 21,  37),
            ( 21,  39, 21,  38),
            ( 21,  39, 22,  38),
            ( 21,  39, 22,  39),
            ( 21,  39, 23,  39),
            ( 23,  40, 23,  40),
            ( 23,  40, 24,  39),
            ( 23,  40, 24,  40),
            ( 23,  40, 24,  41),
            ( 25,  39, 24,  38),
            ( 25,  39, 25,  38),
            ( 25,  39, 26,  38),
            ( 25,  39, 26,  39),
            ( 24,  42, 24,  42),
            ( 24,  42, 25,  42),
            ( 24,  42, 25,  41),
            ( 24,  42, 25,  40),
            ( 26,  42, 26,  41),
            ( 26,  42, 27,  41),
            ( 26,  42, 27,  42),
            ( 26,  42, 26,  43),
            ( 28,  41, 28,  41),
            ( 28,  41, 28,  40),
            ( 28,  41, 29,  40),
            ( 28,  41, 29,  41),
            ( 27,  43, 27,  44),
            ( 27,  43, 28,  42),
            ( 27,  43, 28,  43),
            ( 27,  43, 29,  43),
            ( 24,  44, 24,  43),
            ( 24,  44, 25,  43),
            ( 24,  44, 25,  44),
            ( 24,  44, 24,  45),
            ( 24,  46, 24,  46),
            ( 24,  46, 24,  47),
            ( 24,  46, 25,  47),
            ( 24,  46, 25,  48),
            ( 25,  46, 25,  45),
            ( 25,  46, 26,  45),
            ( 25,  46, 26,  46),
            ( 25,  46, 27,  47),
            ( 28,  45, 28,  45),
            ( 28,  45, 29,  45),
            ( 28,  45, 30,  44),
            ( 28,  45, 28,  46),
            ( 30,  45, 30,  45),
            ( 30,  45, 30,  46),
            ( 30,  45, 31,  45),
            ( 30,  45, 31,  46),
            ( 28,  47, 28,  47),
            ( 28,  47, 28,  48),
            ( 28,  47, 29,  47),
            ( 28,  47, 30,  48),
            ( 26,  49, 26,  48),
            ( 26,  49, 27,  50),
            ( 26,  49, 28,  50),
            ( 26,  49, 28,  49),
            ( 25,  51, 25,  50),
            ( 25,  51, 26,  51),
            ( 25,  51, 26,  52),
            ( 25,  51, 27,  52),
            ( 23,  49, 23,  49),
            ( 23,  49, 23,  50),
            ( 23,  49, 24,  51),
            ( 23,  49, 25,  49),
            ( 21,  48, 21,  48),
            ( 21,  48, 21,  49),
            ( 21,  48, 22,  48),
            ( 21,  48, 22,  49),
            ( 22,  51, 22,  51),
            ( 22,  51, 22,  53),
            ( 22,  51, 23,  52),
            ( 22,  51, 24,  53),
            ( 24,  55, 24,  55),
            ( 24,  55, 25,  54),
            ( 24,  55, 23,  56),
            ( 24,  55, 24,  56),
            ( 21,  57, 21,  57),
            ( 21,  57, 21,  59),
            ( 21,  57, 22,  58),
            ( 21,  57, 23,  58),
            ( 21,  54, 21,  54),
            ( 21,  54, 22,  54),
            ( 21,  54, 21,  56),
            ( 21,  54, 23,  55),
            ( 19,  53, 19,  53),
            ( 19,  53, 20,  53),
            ( 19,  53, 20,  54),
            ( 19,  53, 20,  55),
            ( 20,  49, 20,  49),
            ( 20,  49, 20,  50),
            ( 20,  49, 20,  51),
            ( 20,  49, 21,  50),
            ( 17,  49, 17,  50),
            ( 17,  49, 18,  50),
            ( 17,  49, 18,  49),
            ( 17,  49, 19,  49),
            ( 18,  53, 17,  53),
            ( 18,  53, 18,  52),
            ( 18,  53, 19,  52),
            ( 18,  53, 20,  52),
            ( 15,  51, 15,  51),
            ( 15,  51, 16,  51),
            ( 15,  51, 17,  51),
            ( 15,  51, 17,  52),
            ( 16,  59, 16,  60),
            ( 16,  59, 17,  59),
            ( 16,  59, 18,  59),
            ( 16,  59, 19,  59),
            ( 18,  56, 17,  57),
            ( 18,  56, 18,  57),
            ( 18,  56, 19,  57),
            ( 18,  56, 19,  56),
            ( 17,  55, 17,  56),
            ( 17,  55, 17,  55),
            ( 17,  55, 18,  55),
            ( 17,  55, 18,  54),
            ( 13,  52, 12,  53),
            ( 13,  52, 13,  53),
            ( 13,  52, 14,  53),
            ( 13,  52, 14,  52),
            ( 15,  54, 15,  53),
            ( 15,  54, 14,  54),
            ( 15,  54, 15,  55),
            ( 15,  54, 16,  54),
            ( 11,  54, 11,  54),
            ( 11,  54, 11,  55),
            ( 11,  54, 12,  54),
            ( 11,  54, 12,  55),
            ( 13,  55, 13,  55),
            ( 13,  55, 13,  56),
            ( 13,  55, 14,  56),
            ( 13,  55, 14,  57),
            ( 14,  58, 14,  58),
            ( 14,  58, 15,  57),
            ( 14,  58, 16,  57),
            ( 14,  58, 16,  58),
            ( 14,  59, 13,  59),
            ( 14,  59, 14,  60),
            ( 14,  59, 15,  59),
            ( 14,  59, 15,  60),
            ( 9 ,  55, 9 ,  56),
            ( 9 ,  55, 10,  55),
            ( 9 ,  55, 10,  56),
            ( 9 ,  55, 9 ,  57),
            ( 10,  57, 10,  57),
            ( 10,  57, 11,  57),
            ( 10,  57, 11,  58),
            ( 10,  57, 12,  57),
            ( 10,  60, 10,  60),
            ( 10,  60, 10,  61),
            ( 10,  60, 12,  59),
            ( 10,  60, 12,  61),
            ( 8 ,  58, 8 ,  58),
            ( 8 ,  58, 9 ,  58),
            ( 8 ,  58, 9 ,  59),
            ( 8 ,  58, 10,  59),
            ( 7 ,  60, 7 ,  59),
            ( 7 ,  60, 7 ,  61),
            ( 7 ,  60, 8 ,  60),
            ( 7 ,  60, 9 ,  61),
            ( 6 ,  62, 6 ,  61),
            ( 6 ,  62, 6 ,  62),
            ( 6 ,  62, 6 ,  63),
            ( 6 ,  62, 8 ,  62),
            ( 32,  50, 32,  50),
            ( 32,  50, 33,  49),
            ( 32,  50, 33,  50),
            ( 32,  50, 33,  51),
            ( 31,  52, 30,  52),
            ( 31,  52, 31,  51),
            ( 31,  52, 31,  53),
            ( 31,  52, 32,  51),
            ( 32,  53, 32,  53),
            ( 32,  53, 32,  52),
            ( 32,  53, 33,  53),
            ( 32,  53, 33,  54),
            ( 32,  56, 32,  56),
            ( 32,  56, 33,  55),
            ( 32,  56, 33,  57),
            ( 32,  56, 33,  58),
            ( 29,  54, 29,  53),
            ( 29,  54, 30,  54),
            ( 29,  54, 28,  55),
            ( 29,  54, 29,  55),
            ( 30,  55, 31,  54),
            ( 30,  55, 31,  55),
            ( 30,  55, 31,  56),
            ( 30,  55, 30,  56),
            ( 28,  56, 27,  57),
            ( 28,  56, 28,  57),
            ( 28,  56, 29,  56),
            ( 28,  56, 29,  57),
            ( 30,  57, 30,  58),
            ( 30,  57, 31,  58),
            ( 30,  57, 31,  57),
            ( 30,  57, 32,  59),
            ( 27,  58, 26,  59),
            ( 27,  58, 27,  59),
            ( 27,  58, 28,  59),
            ( 27,  58, 28,  58),
            ( 28,  60, 29,  58),
            ( 28,  60, 29,  60),
            ( 28,  60, 28,  61),
            ( 28,  60, 30,  60),
            ( 29,  61, 29,  62),
            ( 29,  61, 30,  61),
            ( 29,  61, 31,  61),
            ( 29,  61, 32,  61),
            ( 30,  62, 30,  63),
            ( 30,  62, 31,  62),
            ( 30,  62, 32,  62),
            ( 30,  62, 32,  63),
            ( 25,  60, 25,  60),
            ( 25,  60, 25,  61),
            ( 25,  60, 26,  60),
            ( 25,  60, 27,  60),
            ( 23,  61, 24,  61),
            ( 23,  61, 24,  62),
            ( 23,  61, 23,  62),
            ( 23,  61, 23,  63),
            ( 29,  67, 29,  68),
            ( 29,  67, 30,  67),
            ( 29,  67, 31,  66),
            ( 29,  67, 31,  69),
            ( 26,  66, 26,  66),
            ( 26,  66, 27,  66),
            ( 26,  66, 28,  66),
            ( 26,  66, 28,  67),
            ( 29,  64, 29,  65),
            ( 29,  64, 30,  65),
            ( 29,  64, 30,  64),
            ( 29,  64, 29,  63),
            ( 29,  64, 31,  64),
            ( 26,  64, 26,  64),
            ( 26,  64, 26,  65),
            ( 26,  64, 27,  65),
            ( 26,  64, 28,  64),
            ( 26,  62, 26,  62),
            ( 26,  62, 26,  63),
            ( 26,  62, 27,  62),
            ( 26,  62, 27,  63),
            ( 24,  64, 24,  64),
            ( 24,  64, 25,  63),
            ( 24,  64, 25,  64),
            ( 24,  64, 25,  65),
            ( 21,  65, 22,  65),
            ( 21,  65, 21,  66),
            ( 21,  65, 23,  65),
            ( 21,  65, 24,  65),
            ( 20,  63, 22,  64),
            ( 20,  63, 20,  64),
            ( 20,  63, 21,  63),
            ( 20,  63, 23,  64),
            ( 26,  69, 26,  69),
            ( 26,  69, 26,  70),
            ( 26,  69, 27,  69),
            ( 26,  69, 27,  70),
            ( 25,  69, 25,  70),
            ( 25,  69, 25,  68),
            ( 25,  69, 26,  68),
            ( 25,  69, 27,  68),
            ( 23,  69, 23,  69),
            ( 23,  69, 23,  70),
            ( 23,  69, 24,  69),
            ( 23,  69, 24,  70),
            ( 22,  68, 22,  68),
            ( 22,  68, 22,  69),
            ( 22,  68, 22,  70),
            ( 22,  68, 21,  70),
            ( 22,  67, 22,  67),
            ( 22,  67, 23,  67),
            ( 22,  67, 24,  67),
            ( 22,  67, 24,  68),
            ( 17,  64, 17,  65),
            ( 17,  64, 18,  64),
            ( 17,  64, 19,  65),
            ( 17,  64, 19,  66),
            ( 19,  67, 20,  66),
            ( 19,  67, 20,  67),
            ( 19,  67, 21,  67),
            ( 19,  67, 19,  68),
            ( 27,  74, 27,  74),
            ( 27,  74, 28,  74),
            ( 27,  74, 29,  75),
            ( 27,  74, 29,  72),
            ( 25,  74, 25,  74),
            ( 25,  74, 25,  73),
            ( 25,  74, 26,  73),
            ( 25,  74, 27,  73),
            ( 26,  77, 26,  77),
            ( 26,  77, 26,  76),
            ( 26,  77, 27,  76),
            ( 26,  77, 28,  76),
            ( 23,  77, 23,  77),
            ( 23,  77, 24,  77),
            ( 23,  77, 24,  76),
            ( 23,  77, 23,  76),
            ( 23,  73, 24,  74),
            ( 23,  73, 24,  73),
            ( 23,  73, 23,  72),
            ( 23,  73, 22,  72),
            ( 21,  75, 21,  75),
            ( 21,  75, 22,  74),
            ( 21,  75, 22,  73),
            ( 21,  75, 23,  74),
            ( 19,  69, 19,  69),
            ( 19,  69, 19,  70),
            ( 19,  69, 20,  69),
            ( 19,  69, 21,  69),
            ( 14,  64, 16,  64),
            ( 14,  64, 15,  64),
            ( 14,  64, 15,  65),
            ( 14,  64, 14,  65),
            ( 13,  65, 13,  65),
            ( 13,  65, 13,  66),
            ( 13,  65, 14,  66),
            ( 13,  65, 15,  66),
            ( 17,  67, 16,  67),
            ( 17,  67, 17,  68),
            ( 17,  67, 18,  67),
            ( 17,  67, 17,  69),
            ( 18,  70, 18,  70),
            ( 18,  70, 18,  71),
            ( 18,  70, 19,  71),
            ( 18,  70, 20,  71),
            ( 17,  70, 18,  69),
            ( 17,  70, 17,  71),
            ( 17,  70, 16,  71),
            ( 17,  70, 16,  72),
            ( 15,  68, 15,  68),
            ( 15,  68, 15,  69),
            ( 15,  68, 16,  69),
            ( 15,  68, 16,  70),
            ( 14,  70, 14,  70),
            ( 14,  70, 14,  71),
            ( 14,  70, 14,  72),
            ( 14,  70, 15,  71),
            ( 19,  75, 19,  75),
            ( 19,  75, 19,  73),
            ( 19,  75, 20,  73),
            ( 19,  75, 20,  74),
            ( 20,  78, 20,  78),
            ( 20,  78, 20,  77),
            ( 20,  78, 20,  76),
            ( 20,  78, 21,  77),
            ( 18,  79, 18,  79),
            ( 18,  79, 18,  78),
            ( 18,  79, 19,  79),
            ( 18,  79, 20,  79),
            ( 18,  77, 18,  77),
            ( 18,  77, 19,  77),
            ( 18,  77, 19,  76),
            ( 18,  77, 18,  75),
            ( 16,  75, 16,  75),
            ( 16,  75, 16,  74),
            ( 16,  75, 17,  74),
            ( 16,  75, 18,  74),
            ( 15,  76, 16,  76),
            ( 15,  76, 17,  76),
            ( 15,  76, 15,  74),
            ( 15,  76, 15,  75),
            ( 13,  68, 13,  68),
            ( 13,  68, 13,  69),
            ( 13,  68, 13,  70),
            ( 13,  68, 13,  71),
            ( 17,  79, 17,  79),
            ( 17,  79, 17,  78),
            ( 17,  79, 17,  77),
            ( 17,  79, 16,  78),
            ( 15,  79, 14,  79),
            ( 15,  79, 15,  79),
            ( 15,  79, 16,  79),
            ( 15,  79, 14,  78),
            ( 14,  77, 14,  77),
            ( 14,  77, 15,  77),
            ( 14,  77, 14,  76),
            ( 14,  77, 14,  75),
            ( 10,  69, 10,  70),
            ( 10,  69, 11,  69),
            ( 10,  69, 12,  69),
            ( 10,  69, 11,  71),
            ( 10,  69, 12,  71),
            ( 9 ,  72, 9 ,  73),
            ( 9 ,  72, 10,  73),
            ( 9 ,  72, 11,  73),
            ( 9 ,  72, 11,  72),
            ( 9 ,  72, 12,  72),
            ( 13,  79, 13,  79),
            ( 13,  79, 13,  76),
            ( 13,  79, 13,  77),
            ( 13,  79, 13,  78),
            ( 11,  77, 12,  77),
            ( 11,  77, 12,  76),
            ( 11,  77, 12,  75),
            ( 11,  77, 11,  76),
            ( 11,  79, 11,  79),
            ( 11,  79, 11,  78),
            ( 11,  79, 12,  78),
            ( 11,  79, 10,  78),
            ( 9 ,  77, 10,  77),
            ( 9 ,  77, 9 ,  76),
            ( 9 ,  77, 9 ,  75),
            ( 9 ,  77, 10,  75),
            ( 37,  67, 36,  67),
            ( 37,  67, 37,  68),
            ( 37,  67, 37,  69),
            ( 37,  67, 36,  69),
            ( 39,  70, 38,  69),
            ( 39,  70, 38,  70),
            ( 39,  70, 39,  71),
            ( 39,  70, 37,  70),
            ( 38,  71, 38,  72),
            ( 38,  71, 37,  71),
            ( 38,  71, 36,  71),
            ( 38,  71, 36,  72),
            ( 37,  73, 37,  73),
            ( 37,  73, 37,  74),
            ( 37,  73, 36,  73),
            ( 37,  73, 36,  74),
            ( 39,  72, 39,  72),
            ( 39,  72, 39,  73),
            ( 39,  72, 38,  73),
            ( 39,  72, 38,  74),
            ( 42,  72, 42,  73),
            ( 42,  72, 41,  73),
            ( 42,  72, 40,  73),
            ( 42,  72, 40,  72),
            ( 43,  73, 43,  73),
            ( 43,  73, 43,  74),
            ( 43,  73, 42,  74),
            ( 43,  73, 41,  74),
            ( 38,  75, 38,  76),
            ( 38,  75, 37,  76),
            ( 38,  75, 37,  75),
            ( 38,  75, 36,  75),
            ( 38,  77, 37,  77),
            ( 38,  77, 37,  78),
            ( 38,  77, 37,  79),
            ( 38,  77, 38,  78),
            ( 39,  79, 38,  79),
            ( 39,  79, 38,  80),
            ( 39,  79, 39,  80),
            ( 39,  79, 37,  81),
            ( 40,  75, 40,  75),
            ( 40,  75, 39,  74),
            ( 40,  75, 39,  75),
            ( 40,  75, 39,  76),
            ( 44,  74, 44,  74),
            ( 44,  74, 44,  75),
            ( 44,  74, 44,  76),
            ( 44,  74, 43,  75),
            ( 42,  76, 42,  77),
            ( 42,  76, 41,  77),
            ( 42,  76, 41,  76),
            ( 42,  76, 40,  76),
            ( 40,  77, 39,  77),
            ( 40,  77, 39,  78),
            ( 40,  77, 40,  78),
            ( 40,  77, 40,  79),
            ( 42,  78, 42,  78),
            ( 42,  78, 42,  79),
            ( 42,  78, 41,  79),
            ( 42,  78, 41,  80),
            ( 44,  79, 44,  79),
            ( 44,  79, 44,  80),
            ( 44,  79, 43,  79),
            ( 44,  79, 43,  80),
            ( 45,  77, 45,  77),
            ( 45,  77, 45,  78),
            ( 45,  77, 44,  78),
            ( 45,  77, 43,  77),
            ( 46,  78, 46,  78),
            ( 46,  78, 46,  79),
            ( 46,  78, 45,  79),
            ( 46,  78, 45,  80),
            ( 47,  74, 47,  75),
            ( 47,  74, 46,  75),
            ( 47,  74, 45,  75),
            ( 47,  74, 45,  74),
            ( 47,  76, 47,  76),
            ( 47,  76, 47,  77),
            ( 47,  76, 47,  78),
            ( 47,  76, 46,  76),
            ( 49,  79, 50,  79),
            ( 49,  79, 49,  80),
            ( 49,  79, 48,  80),
            ( 49,  79, 48,  79),
            ( 49,  75, 48,  75),
            ( 49,  75, 48,  77),
            ( 49,  75, 49,  76),
            ( 49,  75, 49,  78),
            ( 51,  76, 50,  76),
            ( 51,  76, 50,  77),
            ( 51,  76, 51,  77),
            ( 51,  76, 52,  77),
            ( 52,  78, 52,  78),
            ( 52,  78, 52,  79),
            ( 52,  78, 51,  78),
            ( 52,  78, 50,  78),
            ( 53,  79, 51,  80),
            ( 53,  79, 53,  80),
            ( 53,  79, 54,  79),
            ( 53,  79, 53,  78),
            ( 53,  79, 54,  78),
            ( 57,  79, 55,  79),
            ( 57,  79, 55,  80),
            ( 57,  79, 56,  79),
            ( 57,  79, 56,  80),
            ( 57,  79, 57,  80),
            ( 51,  83, 52,  82),
            ( 51,  83, 50,  82),
            ( 51,  83, 50,  83),
            ( 51,  83, 49,  83),
            ( 48,  83, 47,  82),
            ( 48,  83, 48,  82),
            ( 48,  83, 49,  82),
            ( 48,  83, 47,  83),
            ( 47,  85, 46,  84),
            ( 47,  85, 47,  84),
            ( 47,  85, 48,  84),
            ( 47,  85, 46,  85),
            ( 45,  84, 44,  84),
            ( 45,  84, 45,  83),
            ( 45,  84, 45,  82),
            ( 45,  84, 46,  82),
            ( 46,  88, 46,  87),
            ( 46,  88, 45,  86),
            ( 46,  88, 45,  87),
            ( 46,  88, 45,  88),
            ( 44,  87, 44,  87),
            ( 44,  87, 44,  86),
            ( 44,  87, 43,  86),
            ( 44,  87, 45,  85),
            ( 44,  89, 44,  89),
            ( 44,  89, 44,  88),
            ( 44,  89, 43,  89),
            ( 44,  89, 43,  87),
            ( 43,  83, 43,  83),
            ( 43,  83, 42,  82),
            ( 43,  83, 42,  84),
            ( 43,  83, 41,  82),
            ( 41,  84, 41,  84),
            ( 41,  84, 41,  83),
            ( 41,  84, 40,  83),
            ( 41,  84, 39,  84),
            ( 39,  86, 39,  86),
            ( 39,  86, 38,  85),
            ( 39,  86, 38,  86),
            ( 39,  86, 37,  86),
            ( 41,  86, 41,  86),
            ( 41,  86, 40,  85),
            ( 41,  86, 40,  86),
            ( 41,  86, 40,  87),
            ( 39,  88, 39,  87),
            ( 39,  88, 38,  88),
            ( 39,  88, 37,  88),
            ( 39,  88, 39,  89),
            ( 39,  90, 39,  91),
            ( 39,  90, 38,  90),
            ( 39,  90, 37,  90),
            ( 39,  90, 37,  91),
            ( 42,  89, 42,  89),
            ( 42,  89, 42,  85),
            ( 42,  89, 42,  88),
            ( 42,  89, 41,  87),
            ( 41,  90, 42,  90),
            ( 41,  90, 40,  90),
            ( 41,  90, 40,  89),
            ( 41,  90, 41,  89),
            ( 43,  92, 43,  92),
            ( 43,  92, 42,  92),
            ( 43,  92, 42,  93),
            ( 43,  92, 42,  94),
            ( 41,  93, 41,  93),
            ( 41,  93, 41,  92),
            ( 41,  93, 41,  91),
            ( 41,  93, 40,  92),
            ( 38,  94, 38,  94),
            ( 38,  94, 38,  92),
            ( 38,  94, 38,  93),
            ( 38,  94, 37,  93),
            ( 38,  96, 38,  96),
            ( 38,  96, 38,  95),
            ( 38,  96, 37,  95),
            ( 38,  96, 37,  96),
            ( 40,  95, 40,  95),
            ( 40,  95, 40,  94),
            ( 40,  95, 40,  93),
            ( 40,  95, 41,  94),
            ( 42,  96, 42,  96),
            ( 42,  96, 42,  95),
            ( 42,  96, 41,  95),
            ( 42,  96, 41,  96),
            ( 41,  97, 41,  97),
            ( 41,  97, 40,  96),
            ( 41,  97, 40,  97),
            ( 41,  97, 39,  97),
            ( 39,  98, 39,  98),
            ( 39,  98, 38,  97),
            ( 39,  98, 38,  98),
            ( 39,  98, 38,  99),
            ( 41,  99, 41,  98),
            ( 41,  99, 40,  98),
            ( 41,  99, 40,  99),
            ( 41,  99, 39,  99),
            ( 40, 100, 40, 100),
            ( 40, 100, 39, 100),
            ( 40, 100, 38, 100),
            ( 40, 100, 37, 100),
            ( 40, 101, 40, 101),
            ( 40, 101, 39, 101),
            ( 40, 101, 38, 101),
            ( 40, 101, 38, 102),
            ( 40, 103, 40, 102),
            ( 40, 103, 40, 103),
            ( 40, 103, 39, 103),
            ( 40, 103, 39, 102),
            ( 39, 104, 38, 103),
            ( 39, 104, 38, 104),
            ( 39, 104, 38, 105),
            ( 39, 104, 38, 106),
            ( 40, 105, 40, 104),
            ( 40, 105, 40, 105),
            ( 40, 105, 39, 105),
            ( 40, 105, 39, 106),
            ( 41, 106, 41, 106),
            ( 41, 106, 41, 107),
            ( 41, 106, 40, 106),
            ( 41, 106, 40, 107),
            ( 40, 109, 40, 109),
            ( 40, 109, 40, 108),
            ( 40, 109, 39, 108),
            ( 40, 109, 38, 109),
            ( 43, 110, 41, 109),
            ( 43, 110, 42, 109),
            ( 43, 110, 42, 110),
            ( 43, 110, 43, 111),
            ( 44, 113, 43, 112),
            ( 44, 113, 43, 113),
            ( 44, 113, 43, 114),
            ( 44, 113, 43, 115),
            ( 41, 110, 40, 110),
            ( 41, 110, 40, 111),
            ( 41, 110, 39, 111),
            ( 41, 110, 39, 110),
            ( 40, 113, 40, 113),
            ( 40, 113, 39, 112),
            ( 40, 113, 39, 114),
            ( 40, 113, 40, 112),
            ( 42, 112, 42, 112),
            ( 42, 112, 41, 111),
            ( 42, 112, 41, 112),
            ( 42, 112, 41, 113),
            ( 42, 115, 42, 115),
            ( 42, 115, 42, 114),
            ( 42, 115, 42, 113),
            ( 42, 115, 41, 114),
            ( 41, 115, 41, 115),
            ( 41, 115, 40, 115),
            ( 41, 115, 40, 116),
            ( 41, 115, 39, 116),
            ( 41, 117, 41, 116),
            ( 41, 117, 40, 117),
            ( 41, 117, 40, 118),
            ( 41, 117, 40, 119),
            ( 44,  49, 44,  49),
            ( 44,  49, 43,  49),
            ( 44,  49, 42,  49),
            ( 44,  49, 41,  49),
            ( 44,  49, 43,  50)]

# This function for returning data to other companion scripts, like the one that 
# prepares mvr connections
def get_sfrlist():
    return orig_rch

def get_sfrsegs():
    return orig_seg

# The first objective is to get from the data in orig_seg & orig_rch to 
# something like what Chris worked up for the Prudic example
#
# Start by creating a file of only the connection data
# Loop through each reach and work up connections

def gen_mf6_sfr_connections():
    conns = []
    for i in np.arange(0, len(orig_seg)):
        tup = orig_seg[i]
        segid = tup[0]
        ioutseg = tup[2]
        iupseg = tup[3]
        
        # Get all reaches associated with segment
        # notation on next line comes from: https://stackoverflow.com/questions/2191699/find-an-element-in-a-list-of-tuples
        allrchs = [item for item in orig_rch if item[3] == segid]
        
        # Loop through allrchs and generate list of connections
        for rchx in allrchs:
            # rchx will be a tuple
            upconn = []
            dnconn = []
            
            if rchx[4] == 1:      # checks if first rch of segment
                # Collect all segs that dump to the current one (there may not be any)
                dumpersegs = [item for item in orig_seg if item[2] == segid]
                # For every seg that outflows to current, set last reach of it as
                # an upstream connection
                for dumper in dumpersegs:
                    dumper_seg_id = dumper[0]
                    rch_cnt = len([item for item in orig_rch if item[3] == dumper_seg_id])
                    lastrch = [item for item in orig_rch if item[3] == dumper_seg_id and item[4] == rch_cnt]
                    idx = orig_rch.index(lastrch[0])
                    upconn.append(int(idx))
                
                # Current reach is the most upstream reach for current segment
                # if iupseg==0, then no upstream connection
                # else if iupseg!=0, then there is an upstream connection
                if iupseg == 0:
                    pass
                elif iupseg > 0:  # Lake connections, signified with negative numbers, aren't handled here
                    iupseg_rchs = [item for item in orig_rch if item[3] == iupseg]
                    # Get the index of the last reach of the segement that was the upstream segment in the orig sfr file
                    idx = orig_rch.index(iupseg_rchs[len(iupseg_rchs)-1])   # From: https://stackoverflow.com/questions/20239312/find-an-exact-tuple-match-in-a-list-of-tuples-and-return-its-index
                    upconn.append(idx)
                
                # Even if the first reach of a segement, it will have an outlet,
                # either the next reach in the segment, or first reach of outseg, 
                # which should be taken care of below
                if len(allrchs) > 1:
                    idx = orig_rch.index(rchx)
                    # adjust idx for 0-based and increment to next item in list
                    dnconn.append(int(idx + 1) * -1)
            
            elif rchx[4] > 1 and not rchx[4] == len(allrchs):
                # Current reach is 'interior' on the original segment and therefore
                # should only have 1 upstream & 1 downstream segement
                idx = orig_rch.index(rchx)
                # B/c 0-based, idx will already be incremented by -1
                upconn.append(int(idx - 1))
                # adjust idx for 0-based and increment to next item in list
                dnconn.append(int(idx + 1) * -1)  # all downstream connections are negative in MF6
            
            if rchx[4] == len(allrchs):
                # If the last reach in a multi-reach segment, always need to account
                # for the reach immediately upstream (single reach segs dealt with 
                # above), unless of course we're dealing with a single reach segment
                # like in the case of a spillway from a lake
                if len(allrchs) != 1:
                    idx = orig_rch.index(rchx)
                    # B/c 0-based, idx will already be incremented by -1
                    upconn.append(int(idx - 1))
                
                # Current reach is last reach in segment and may have multiple 
                # downstream connections, particular when dealing with diversions.
                if ioutseg == 0:
                    pass
                elif ioutseg > 0:       # Lake connections, signified with negative numbers, aren't handled here
                    idnseg_rchs = [item for item in orig_rch if item[3] == ioutseg and item[4] == 1]
                    idx = orig_rch.index(idnseg_rchs[0])
                    # adjust idx for 0-based and increment to next item in list
                    dnconn.append(int(idx) * -1)
                    
                # In addition to ioutseg, look for all segments that may have the 
                # current segment as their iupseg
                possible_divs = [item for item in orig_seg if item[3] == rchx[3]]
                for segx in possible_divs:
                    # Next, peel out all first reach for any segments listed in possible_divs
                    first_rchs = [item for item in orig_rch if item[3] == segx[0] and item[4] == 1]
                    for firstx in first_rchs:
                        idx = orig_rch.index(firstx)
                        # adjust idx for 0-based and increment to next item in list
                        dnconn.append(int(idx) * -1)
            
            # Append the collection of upconn & dnconn as an entry in a list
            idx = orig_rch.index(rchx)
            # Adjust current index for 0-based
            conns.append([idx] + upconn + dnconn)
    
    return conns

# Need to create a function that goes back and determines the number of diversions
# for current reach.  I think the easiest way to do this is to simply look for segs
# with a non-zero and positive iupseg.  Once identified, pull all the reaches 
# associated with iupseg, get the last reach, and increment its ndv value
# Start by initializing all dictionary entries to zero
def tally_ndvs(conn):
    ndv = {}
    ustrf = []
    for i in np.arange(0, len(conn)):
        ndv.update({i: (0, 0)})
    
    #            (upstrm, receiver)
    allupsegs = [(item[3], item[0]) for item in orig_seg if item[3] > 0]
    
    # Loop through allupsegs
    for iupseg in allupsegs:
        allupsegrchs = [item for item in orig_rch if item[3] == iupseg[0]]  # This grabs all reachs associated with upstream segment, the end of which has water diverted into a canal
        alldnsegrchs = [item for item in orig_rch if item[3] == iupseg[1]]  # This grabs all reachs associated with the first segment of the diversion
        
        # Get the last rch, then get its index in the master list
        last = len(allupsegrchs) - 1        # " - 1" to compensate for 0-based
        divrch = allupsegrchs[last]
        receiverch = alldnsegrchs[0]        # get the first reach of the segment being diverted into
        idxdiv = orig_rch.index(divrch)     # don't adjust this for 0-based because dictionary also 0-based
        idxrec = orig_rch.index(receiverch)
        
        mutable = list(ndv[idxdiv])
        mutable[0] += 1
        mutable[1] = idxrec
        t = tuple(mutable)
        ndv.update({idxdiv: t})
        
        # I think some of the code above can be cast off.  As I learned more about ustrf
        # and what it is, I think all I really need is a list of reaches indices that 
        # correspond to the first reach of a diversion.  If that turns out to be the case,
        # it may possible to simplify the contents of ndv
        ustrf.append(idxrec)
    
    return ndv, ustrf

def gen_sfrpkdata(conns, ndvs, ustrf):
    pkdat = []
    for x, rchx in enumerate(orig_rch):
        
        segid = rchx[3]
        
        # Generate a list for each reach that contains the following:
        # ------------------------------------------------------------
        # rno  rlen  rwid  rgrd  rtp  rbth  rhk  man  ncon  ustrf  ndv
        rno = x
        rlen = rchx[5]
        
        # Get lay, row, col (adjust for 0-based)
        k = rchx[0] - 1
        i = rchx[1] - 1
        j = rchx[2] - 1
        
        # to get rwid (width), need to query orig_seg data
        iseg = rchx[3]
        irch = rchx[4]
        segx = [item for item in orig_seg if item[0] == iseg][0]
        rwid = segx[11]
        rgrd = rchx[7]
        rtp  = rchx[6]
        rbth = rchx[8]
        rhk  = rchx[9]
        man  = np.nanmax([segx[8], segx[9]])
        
        # To get number of connections, need to query conns object
        # Compensate for 0-based rno value and increment by 1
        numcons = [item for item in conns if item[0] == (rno)][0]
        # Need to account for the fact that the current reach is included in the list, thus subtract 1
        ncon = len(numcons) - 1 
           
        # ndiv
        ndv = ndvs[rno][0]
        
        # Not entirely clear what this is from the documentation.  For braided streams maybe? 
        # Set to 1.0 unless first reach of canal, in which case this looks to be 0.0 based on
        # example input file provided in mf6io.pdf
        if rno in ustrf:
            ustrfx = 0.0
        else:
            ustrfx = 1.0
        
        if irch == 1:
            aux1 = segx[12]
        else:
            aux1 = 0 
        
        boundname = segx[10]
        
        pkdat.append((rno, (k,i,j), rlen, rwid, rgrd, rtp, rbth, rhk, man, ncon, ustrfx, ndv, aux1, boundname))
    
    pkdat_dict = {'filename': "sfr_pakdata.in", 'data': pkdat}
    return pkdat_dict

# Set up diversion data for entry into flopy
def define_divs_dat(ndvs):
    divs = []
    # For the priority scheme in MF6-only (w/o MODSIM) use a dictionary to set
    # how the diversions will be operated
    cprior = { 20: 'EXCESS',    
               45: 'THRESHOLD', 
               70: 'THRESHOLD', 
               87: 'THRESHOLD', 
              103: 'FRACTION',  
              135: 'EXCESS',    
              175: 'THRESHOLD', 
              190: 'THRESHOLD', 
              209: 'THRESHOLD', 
              231: 'FRACTION',  
              289: 'EXCESS',    
              319: 'THRESHOLD', 
              340: 'THRESHOLD', 
              356: 'THRESHOLD', 
              388: 'FRACTION ', 
              429: 'EXCESS',    
              464: 'THRESHOLD', 
              476: 'THRESHOLD', 
              515: 'THRESHOLD', 
              553: 'FRACTION'}  
    
    for key, item in ndvs.items():
        if item[0] > 0:
            # current reach has diversion, prep mf6 input:
            rno        = key
            idv        = item[0]
            iconr      = item[1]
            cprior_txt = cprior[rno]
            
            #           <rno>  <idv> <iconr>     <cprior>  note: idv needs to be converted to 0-based
            divs.append([rno, idv-1,  iconr,  cprior_txt])
    
    return divs, cprior

def get_lak_outletInfo():
    outlets = []
    outconn = [item for item in orig_seg if item[3] < 0]
    for i, segx in enumerate(outconn):
        outletno = i
        
        # 'upstream' lake connection
        lakein = abs(segx[3]) - 1      # ... - 1 adjusts for 0-base
        
        # For this problem, lakout will always = 0 (adjusted for 0-based) as there are no
        # directly connected lakes (lake x dumping to lak y)
        lakeout   = -1
        
        # retrieve invert elevation from original SFR data
        segid = segx[0]
        outletrchs = [item for item in orig_rch if item[3] == segid]
        rch_cnt = len(outletrchs)
        lastrch = [item for item in outletrchs if item[3] == segid and item[4] == rch_cnt][0]
        invert = lastrch[6]
        
        width = segx[11]
        rough = np.nanmin([segx[8], segx[9]])
        slope = 0.13
        
        # set outlet type
        if 'mainstem' in segx[10].lower():
            couttype = 'SPECIFIED'
            invert   = lastrch[6] + (lastrch[5] / 2 * lastrch[7]) # Invert needed for calc'ing deadpool. Eqn is: STRTOP + (1/2 * RCHLEN * SLOPE)
        elif 'spillway' in segx[10].lower():
            couttype = 'MANNING'
            
        #              <outletno> <lakein> <lakeout> <couttype> <invert> <width> <rough> <slope>
        #              --------- 0-based -----------
        outlets.append([outletno,  lakein,  lakeout,  couttype,  invert,  width,  rough,  slope])
    
    return outlets

def determine_runoff_conns_4mvr(pth):
    
    elev_arr = np.loadtxt(os.path.join(pth,'dis_support','top1.txt'), dtype=np.float)
    ibnd     = np.loadtxt(os.path.join(pth,'bas_support','ibnd1.txt'), dtype=np.int)
    
    # Get the sfr information stored in a companion script
    sfr_dat  = get_sfrlist()
    sfrlayout = np.zeros_like(ibnd)
    for i, rchx in enumerate(sfr_dat):
        row = rchx[1]
        col = rchx[2]
        sfrlayout[row - 1, col - 1] = i + 1
    
    sfrlayout_new = sfrlayout.copy()
    
    nrow = 64
    ncol = 133
    stop_candidate = False
    
    for i in np.arange(0, nrow):
        for j in np.arange(0, ncol):
        
            # Check to ensure current cell is active
            if ibnd[i, j] == 0:
                continue
            
            # Check to make sure it is not a stream cell
            if not sfrlayout[i, j] == 0:
                continue
            
            # Recursively trace path by steepest decent back to a stream
            curr_i = i
            curr_j = j
            
            sfrlayout_conn_candidate_elev = 10000.
            while True:
                direc = 0
                min_elev = elev_arr[curr_i, curr_j]
                
                # Look straight left
                if curr_j > 0:
                    if not sfrlayout[curr_i, curr_j - 1] == 0 and not ibnd[curr_i, curr_j - 1] == 0:   # Step in if neighbor is a stream cell
                        if elev_arr[curr_i, curr_j - 1] > 0 and (elev_arr[curr_i, curr_j - 1] < elev_arr[curr_i, curr_j] and
                                                                 elev_arr[curr_i, curr_j - 1] < sfrlayout_conn_candidate_elev):
                            sfrlayout_conn_candidate = sfrlayout[curr_i, curr_j - 1]
                            sfrlayout_conn_candidate_elev = elev_arr[curr_i, curr_j - 1]
                            stop_candidate = True
                    
                    elif not elev_arr[curr_i, curr_j - 1] == 0 and not ibnd[curr_i, curr_j - 1] == 0:  # Step here if neighbor is not an sfr cell
                        if elev_arr[curr_i, curr_j - 1] < elev_arr[curr_i, curr_j] and elev_arr[curr_i, curr_j - 1] < min_elev:
                            elevcm1 = elev_arr[curr_i, curr_j - 1]
                            min_elev = elevcm1
                            direc = 2
                
                # Look up and left
                if curr_j > 0 and curr_i > 0:
                    if not sfrlayout[curr_i - 1, curr_j - 1] == 0 and not ibnd[curr_i - 1, curr_j - 1] == 0:   # Step in if neighbor is a stream cell
                        if elev_arr[curr_i - 1, curr_j - 1] > 0 and (elev_arr[curr_i - 1, curr_j - 1] < elev_arr[curr_i, curr_j] and
                                                                     elev_arr[curr_i - 1, curr_j - 1] < sfrlayout_conn_candidate_elev):
                            sfrlayout_conn_candidate = sfrlayout[curr_i - 1, curr_j - 1]
                            sfrlayout_conn_candidate_elev = elev_arr[curr_i - 1, curr_j - 1]
                            stop_candidate = True

                    elif not elev_arr[curr_i - 1, curr_j - 1] == 0 and not ibnd[curr_i - 1, curr_j - 1] == 0:   # Step here if neighbor is not an sfr cell
                        if elev_arr[curr_i - 1, curr_j - 1] < elev_arr[curr_i, curr_j] and elev_arr[curr_i - 1, curr_j - 1] < min_elev:
                            elevrm1cm1 = elev_arr[curr_i - 1, curr_j - 1]
                            min_elev = elevrm1cm1
                            direc = 5

                
                # Look straight right
                if curr_j < ncol - 1:
                    if not sfrlayout[curr_i, curr_j + 1] == 0 and not ibnd[curr_i, curr_j + 1] == 0:   # Step in if neighbor is a stream cell
                        if elev_arr[curr_i, curr_j + 1] > 0 and (elev_arr[curr_i, curr_j + 1] < elev_arr[curr_i, curr_j] and
                                                                 elev_arr[curr_i, curr_j + 1] < sfrlayout_conn_candidate_elev):
                            sfrlayout_conn_candidate = sfrlayout[curr_i, curr_j + 1]
                            sfrlayout_conn_candidate_elev = elev_arr[curr_i, curr_j + 1]
                            stop_candidate = True
                    
                    elif not elev_arr[curr_i, curr_j + 1] == 0 and not ibnd[curr_i, curr_j + 1] == 0:  # Step here if neighbor is not an sfr cell
                        if elev_arr[curr_i, curr_j + 1] < elev_arr[curr_i, curr_j] and elev_arr[curr_i, curr_j + 1] < min_elev:
                            elevcm1 = elev_arr[curr_i, curr_j + 1]
                            min_elev = elevcm1
                            direc = 4
                
                # Look straight right and down
                if curr_i < nrow - 1 and curr_j < ncol - 1:
                    if not sfrlayout[curr_i + 1, curr_j + 1] == 0 and not ibnd[curr_i + 1, curr_j + 1] == 0:   # Step in if neighbor is a stream cell
                        if elev_arr[curr_i + 1, curr_j + 1] > 0 and (elev_arr[curr_i + 1, curr_j + 1] < elev_arr[curr_i, curr_j] and
                                                                     elev_arr[curr_i + 1, curr_j + 1] < sfrlayout_conn_candidate_elev):
                            sfrlayout_conn_candidate = sfrlayout[curr_i + 1, curr_j + 1]
                            sfrlayout_conn_candidate_elev = elev_arr[curr_i + 1, curr_j + 1]
                            stop_candidate = True
                    
                    elif not elev_arr[curr_i + 1, curr_j + 1] == 0 and not ibnd[curr_i + 1, curr_j + 1] == 0:   # Step here if neighbor is not an sfr cell
                        if elev_arr[curr_i + 1, curr_j + 1] < elev_arr[curr_i, curr_j] and elev_arr[curr_i + 1, curr_j + 1] < min_elev:
                            elevrp1cp1 = elev_arr[curr_i + 1, curr_j + 1]
                            min_elev = elevrp1cp1
                            direc = 7
                
                
                # Look straight up
                if curr_i > 0:
                    if not sfrlayout[curr_i - 1, curr_j] == 0 and not ibnd[curr_i - 1, curr_j] == 0:   # Step in if neighbor is a stream cell
                        if elev_arr[curr_i - 1, curr_j] > 0 and (elev_arr[curr_i - 1, curr_j] < elev_arr[curr_i, curr_j] and
                                                                 elev_arr[curr_i - 1, curr_j] < sfrlayout_conn_candidate_elev):
                            sfrlayout_conn_candidate = sfrlayout[curr_i - 1, curr_j]
                            sfrlayout_conn_candidate_elev = elev_arr[curr_i - 1, curr_j]
                            stop_candidate = True
                    
                    elif not elev_arr[curr_i - 1, curr_j] == 0 and not ibnd[curr_i - 1, curr_j] == 0:   # Step here if neighbor is not an sfr cell
                        if elev_arr[curr_i - 1, curr_j] < elev_arr[curr_i, curr_j] and elev_arr[curr_i - 1, curr_j] < min_elev:
                            elevcm1 = elev_arr[curr_i - 1, curr_j]
                            min_elev = elevcm1
                            direc = 3
                    
                
                # Look up and right
                if curr_i > 0 and curr_j < ncol - 1:
                    if not sfrlayout[curr_i - 1, curr_j + 1] == 0 and not ibnd[curr_i - 1, curr_j + 1] == 0:   # Step in if neighbor is a stream cell
                        if elev_arr[curr_i - 1, curr_j + 1] > 0 and (elev_arr[curr_i - 1, curr_j + 1] < elev_arr[curr_i, curr_j] and
                                                                 elev_arr[curr_i - 1, curr_j + 1] < sfrlayout_conn_candidate_elev):
                            sfrlayout_conn_candidate = sfrlayout[curr_i - 1, curr_j + 1]
                            sfrlayout_conn_candidate_elev = elev_arr[curr_i - 1, curr_j + 1]
                            stop_candidate = True
                    
                    elif not elev_arr[curr_i - 1, curr_j + 1] == 0 and not ibnd[curr_i - 1, curr_j + 1] == 0:   # Step here if neighbor is not an sfr cell
                        if elev_arr[curr_i - 1, curr_j + 1] < elev_arr[curr_i, curr_j] and elev_arr[curr_i - 1, curr_j + 1] < min_elev:
                            elevrm1cp1 = elev_arr[curr_i - 1, curr_j + 1]
                            min_elev = elevrm1cp1
                            direc = 6
                
                # Look straight down
                if curr_i < nrow - 1:
                    if not sfrlayout[curr_i + 1, curr_j] == 0 and not ibnd[curr_i + 1, curr_j] == 0:   # Step in if neighbor is a stream cell
                        if elev_arr[curr_i + 1, curr_j] > 0 and (elev_arr[curr_i + 1, curr_j] < elev_arr[curr_i, curr_j] and
                                                                 elev_arr[curr_i + 1, curr_j] < sfrlayout_conn_candidate_elev):
                            sfrlayout_conn_candidate = sfrlayout[curr_i + 1, curr_j]
                            sfrlayout_conn_candidate_elev = elev_arr[curr_i + 1, curr_j]
                            stop_candidate = True
                    
                    elif not elev_arr[curr_i + 1, curr_j] == 0 and not ibnd[curr_i + 1, curr_j] == 0:   # Step here if neighbor is not an sfr cell
                        if elev_arr[curr_i + 1, curr_j] < elev_arr[curr_i, curr_j] and elev_arr[curr_i + 1, curr_j] < min_elev:
                            elevrp1 = elev_arr[curr_i + 1, curr_j]
                            min_elev = elevrp1
                            direc = 1
                    
                # Look down and left
                if curr_i < nrow - 1 and curr_j > 0:
                    if not sfrlayout[curr_i + 1, curr_j - 1] == 0 and not ibnd[curr_i + 1, curr_j - 1] == 0:   # Step in if neighbor is a stream cell
                        if elev_arr[curr_i + 1, curr_j - 1] > 0 and (elev_arr[curr_i + 1, curr_j - 1] < elev_arr[curr_i, curr_j] and
                                                                 elev_arr[curr_i + 1, curr_j - 1] < sfrlayout_conn_candidate_elev):
                            sfrlayout_conn_candidate = sfrlayout[curr_i + 1, curr_j - 1]
                            sfrlayout_conn_candidate_elev = elev_arr[curr_i + 1, curr_j - 1]
                            stop_candidate = True
                    
                    elif not elev_arr[curr_i + 1, curr_j - 1] == 0 and not ibnd[curr_i + 1, curr_j - 1] == 0:   # Step here if neighbor is not an sfr cell
                        if elev_arr[curr_i + 1, curr_j - 1] < elev_arr[curr_i, curr_j] and elev_arr[curr_i + 1, curr_j - 1] < min_elev:
                            elevrp1cm1 = elev_arr[curr_i + 1, curr_j - 1]
                            min_elev = elevrp1cm1
                            direc = 8
                
                # if stop candidate found, don't move the cell indices
                if not stop_candidate:
                    # Direc corresponds to:
                    #  |----------------------
                    #  |  5  |    3    |  6  |
                    #  |----------------------
                    #  |  2  | cur_cel |  4  |
                    #  |----------------------
                    #  |  8  |    1    |  7  |
                    #  |----------------------
                    if direc == 0:
                        break
                    elif direc == 1:
                        curr_i += 1
                    elif direc == 2:
                        curr_j -= 1
                    elif direc == 3:
                        curr_i -= 1
                    elif direc == 4:
                        curr_j += 1
                    elif direc == 5:
                        curr_i -= 1
                        curr_j -= 1
                    elif direc == 6:
                        curr_i -= 1
                        curr_j += 1
                    elif direc == 7:
                        curr_i += 1
                        curr_j += 1
                    elif direc == 8:
                        curr_i += 1
                        curr_j -= 1
                
                if stop_candidate:
                    sfrlayout_new[i, j] = sfrlayout_conn_candidate
                    stop_candidate = False
                    break  # Bust out of while loop
                elif not stop_candidate:
                    # Check if encountered ibnd == 0, which may be a lake or boundary that drains out of model
                    if ibnd[curr_i, curr_j] == 0:
                        # This condition is dealt with after looping through all cells,
                        # see comment that starts, "Last step is set..."
                        break
                    pass  # Commence next downstream cell search

    # Last step is set the 0's in the vicinity of the lake equal to the negative of the lake connection
    for i in np.arange(0, nrow):
        for j in np.arange(0, ncol):
            if sfrlayout_new[i, j] == 0 and ibnd[i, j] > 0:
                sfrlayout_new[i, j] = -1
    
    # Once all cells are filled, save to array
    np.savetxt(os.path.join(pth, 'uzf_support','irunbnd_mf6.txt'), sfrlayout_new, fmt='%5d')
    
    return sfrlayout_new

def get_mf6_wel_dict():
    # Get list of unique well locations 
    wels = list(set([item[0:2] for item in wellconn]))
    
    # Set up dictionary that can be used to query well index 
    wel_cell_dict = {}
    
    # generate a list for the wel package constructor
    weldat = []
    i = 0
    for wel in wels:
        # Plan is to use BMI interface to set supplemental pumping amounts
        # Set 'flow' = 0. for now
        # cell indices 0-based
        #           [(layer,      row,   column), flow]
        weldat.append([(3-1, wel[0]-1, wel[1]-1), -0.0])  
        
        # Append dictionary for each unique well encountered
        if not (wel[0]-1, wel[1]-1) in wel_cell_dict:
            wel_cell_dict.update({(wel[0]-1, wel[1]-1): i})
            i += 1
            
    return wel_cell_dict

def return_wel2uzf_conns_for_mvr():
    return wellconn

def generate_irrig_events(delr, delc, iuzno_cell_dict, static_mvrperioddata):

    # Pull the original SFR information
    orig_seg = get_sfrsegs()
    orig_rch = get_sfrlist()
    
    # set up a mock year
    rng = pd.date_range(start='9/30/1990', end='9/30/1991', freq='D')
    idx = np.arange(1,len(rng) + 1)
    df = pd.DataFrame({'day': idx, 'Date': rng})
    	
    # Retrieve the dictionary of uzf cell connections to specific wells
    # (wel_cell_dict is 0-based, both the key and the value)
    wel_cell_dict = get_mf6_wel_dict()
    
    # Get list of connections from original MODSIM-MFNWT .wel file
    wel2uzf = return_wel2uzf_conns_for_mvr()
    
    # Get all the laterals in a list
    laterals_isegid = [item[0] for item in orig_seg if 'lateral' in item[10].lower()]
    
    fl = os.path.join('modsim_data','sfr_support')
    # A list of all the irrigated cells:                     
    sfr2uzf = pd.read_csv(os.path.join(fl,'sfr_2_uzf_conns.csv'), header=0)
    
    # The first day of irrigation is 4/1/1991, corresponding to 0-based index 183
    # Loop over all remaining days in the simulation, all of which are in the irrig season
    subgroup_sw = 1   # Using 'subgroup'-ings to limit the number of flds receiving water each day
    subgroup_gw = 10  # In other words, this is a way of rotating irrigations about the fields
    # Reminder: B/c multiple fields may receive water from a well in the same time step,
    #           BMI-calling program will need to the sum of each connected field's pumping
    #           demand in order to set a total pumping rate that can satisfy each field's
    #           cumulative supplemental demand. Next, the BMI interface will need to
    #           adjust the value associated with UPTO to get the water delivered.
    #
    # The loop below requires: 1) iuzno_cell_dict
    #                          2) wel_cell_dict
    mvrperioddata_irrig = {}
    wel_spd = {}             # This is for passing back to the WEL package instantiator
    for i in [1] + np.arange(184, len(df), step=1).tolist():
        # Start with a fresh list of connections, including all the conns that don't change in the simulation
        mvrperioddata_x = static_mvrperioddata.copy()
        wel_pumping_needs = []

        # Started out with these being reset within each lateral loop,
        # but they should remain intact for the entire stress period
        wel_sp_dict = {}
        well_sp_idx = 0
        
        # Loop thru each lateral
        for segid in laterals_isegid:
            # Get the last reach of each lateral segment, wire up the mvr connection
            last_rch = [item for item in orig_rch if item[3] == segid]
            # idx will be the reach no. within the list of all reaches
            sw_provider_idx = orig_rch.index(last_rch[len(last_rch) - 1])   
            
            # Retrieve list of fields (cells) connected to reach == sw_provider_idx
            # item: <row> <col>  <id> <ag> <active_cell> <ghostnode>
            # e.g.,   36,   31, 4686,   1,            1,          5
            # ghostnode: this is the original segment that acted as a lateral (a diversion from a diversion) 
            #            serving the fields listed in sfr2uzf
            elig_receivers = [pd.DataFrame(fld).loc[:].values.flatten().tolist() for fld in sfr2uzf.itertuples() if getattr(fld, "GhostNode") == segid]
            subset_receivers = pd.DataFrame(elig_receivers, columns=['dum','Row','Col','Cell_ID','Ag','Active_Cel','GhostNode','subgroup'])
            elig_receivers_sw = subset_receivers[subset_receivers['subgroup'] == subgroup_sw].copy()
            elig_receivers_sw.reset_index(drop=True, inplace=True)
            elig_receivers_gw = subset_receivers[subset_receivers['subgroup'] == subgroup_gw].copy()
            elig_receivers_gw.reset_index(drop=True, inplace=True)
            
            # Construct a new list of random sw & gw application depths from gauss distribution
            sw_app = np.random.normal(0.15, 0.02, 4)  # May not need all 4 values, but that's handled below
            gw_app = np.random.normal(0.10, 0.02, 4)  # assume smaller application depths associate with gw
            
            # Wire up MVR connection for each receiver in the list above
            # Dealing with surface water connections at this point
            #for ix, receiver in enumerate(elig_receivers_sw):
            for ix, receiver in elig_receivers_sw.iterrows():
                # iuzno_cell_dict row/col indices are 0-based, receivers row/col indices use fortran-based indexing
                row = getattr(receiver, "Row")
                col = getattr(receiver, "Col")
                receiver_iuzno = iuzno_cell_dict[(row - 1, col - 1)]  # This will return the 0-based iuzno
                
                # Next step is to calculate the fraction of water to send to the current connection
                # All SFR -> UZF connections will use FACTOR option (analagous to FRACTION defined in cprior)
                value = sw_app[ix] / np.sum(sw_app[0:len(elig_receivers_sw)])
                
                # Note 1: sw_provider_idx already is 0-based, which is what flopy expects
                # Note 2: Use "FACTOR" for all irrigations, and calling program will set the amounts
                mvrperioddata_x.append(('SFR-1', sw_provider_idx, 'UZF-1', receiver_iuzno, 'FACTOR', value))
            
            # Next, deal with irrigation well connections
            # Important to remember from the mf6io.pdf document: 
            # "For the standard boundary packages, the provider identifier 
            # is the number of the boundary as it is listed in the package
            # input file. (Note that the order of these boundaries may
            # change by stress period, which must be accounted for in the
            # Mover Package.) So the first well has an identifier of one.
            # The second is two, and so forth."
            # This present a bit of a challenge to keep track of, and will
            # add to the book-keeping code below, but is unavoidable. To help
            # the following dictionary will be recreated every stress period
            # to help get the provider index correct.
            for iy, receiver in elig_receivers_gw.iterrows():
                # iuzno_cell_dict row/col indices are 0-based, receivers row/col indices use fortran-based indexing
                row = getattr(receiver, "Row")
                col = getattr(receiver, "Col")
                receiver_iuzno = iuzno_cell_dict[(row - 1, col - 1)]  # This will return the 0-based iuzno
                
                # Figure out the well's row/col indices for specification in the WEL package 
                # To figure them out, back-trace from the uzf row/col indices receiving water
                # (note: indices in wel2uzf are 1-based)
                sup_well = [y for y in wel2uzf if y[2] == row and y[3] == col]
                sup_well_row = sup_well[0][0]
                sup_well_col = sup_well[0][1]
                
                # wrong: Also need to figure out the provider well's index for the current field
                # wrong: wel_cell_dict row column indices are 0-based
                # wrong: gw_provider_idx = wel_cell_dict[(sup_well_row - 1, sup_well_col - 1)]
                
                # Next step is to calculate the fraction of water to send to the current connection
                # All WEL -> UZF connections will use FACTOR option
                value = gw_app[iy] / np.sum(gw_app[0:len(elig_receivers_gw)])
                pump_vol_m3 = -1 * gw_app[iy] * delr * delc  # -1* signifies extraction
                welname = 'wel_' + str(sup_well_row) + '_' + str(sup_well_col)
                                
                # Tally up the pumping needs
                # Figure out if current well has already been added to the list, 
                # in which case accumulate total pumping for that well
                if len([itm for itm in wel_pumping_needs if itm[0][0] == (3 - 1) and itm[0][1] == (sup_well_row - 1) and itm[0][2] == (sup_well_col - 1)]) == 0:
                    # Create a dictionary entry storing the well's index for mover linkage
                    wel_sp_dict.update({(sup_well_row - 1, sup_well_col - 1): well_sp_idx})
                    #                      [(layer,      row,   column),        flow]  
                    wel_pumping_needs.append([(3-1, sup_well_row - 1, sup_well_col - 1), pump_vol_m3, welname]) 
                    
                    # increment for next well that is added to dictionary (for this stress period)
                    well_sp_idx += 1
                else:
                    # Accumulate pumpage if landing here
                    idx = [x for x, y in enumerate(wel_pumping_needs) if y[0][1] == (sup_well_row - 1) and y[0][2] == (sup_well_col - 1)][0]
                    wel_pumping_needs[idx][1] += pump_vol_m3  # second index is the pumping volume
                
                # In case the 'else' component of the above if statement was 
                # dropped into, will need to set the gw_provider_idx
                gw_provider_idx = wel_sp_dict[(sup_well_row - 1, sup_well_col - 1)]
                # Note 1: gw_provider_idx already is 0-based, which is what flopy expects
                # Note 2: Use "FACTOR" for all irrigations, and calling program will set the amounts
                mvrperioddata_x.append(('WEL-1', gw_provider_idx, 'UZF-1', receiver_iuzno, 'FACTOR', value))
                
            
        # There are 20 subgroups, so if exceeding that number, cycle back to 1
        # This is just a way to rotate irrigations among the fields
        subgroup_sw += 1
        subgroup_gw += 1
        if subgroup_sw > 20:
            subgroup_sw = 1
        if subgroup_gw > 20:
            subgroup_gw = 1
            
        # Update the stress period dictionary
        mvrperioddata_irrig.update({i: mvrperioddata_x})
        
        # Update the dictionary that will be fed to the WEL package instantiator
        wel_spd.update({i: wel_pumping_needs})
        
        # Update the user
        print('Finished constructing MVR spd: ' + df['Date'].loc[df['day'] == i].to_string())
    
    # Return the dictionary of mvr stress period data
    return mvrperioddata_irrig, wel_spd



